<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syroot.KnownFolders</name>
    </assembly>
    <members>
        <member name="T:Syroot.Windows.IO.KnownFolder">
            <summary>
            Represents a special Windows directory and provides methods to retrieve information about it.
            </summary>
        </member>
        <member name="M:Syroot.Windows.IO.KnownFolder.#ctor(Syroot.Windows.IO.KnownFolderType)">
            <summary>
            Initializes a new instance of the <see cref="T:Syroot.Windows.IO.KnownFolder"/> class for the folder of the given type. It
            provides the values for the current user.
            </summary>
            <param name="type">The <see cref="T:Syroot.Windows.IO.KnownFolderType"/> of the known folder to represent.</param>
        </member>
        <member name="M:Syroot.Windows.IO.KnownFolder.#ctor(Syroot.Windows.IO.KnownFolderType,System.Security.Principal.WindowsIdentity)">
            <summary>
            Initializes a new instance of the <see cref="T:Syroot.Windows.IO.KnownFolder"/> class for the folder of the given type. It
            provides the values for the given impersonated user.
            </summary>
            <param name="type">The <see cref="T:Syroot.Windows.IO.KnownFolderType"/> of the known folder to represent.</param>
            <param name="identity">The <see cref="T:System.Security.Principal.WindowsIdentity"/> of the impersonated user whose properties will be
            provided.</param>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolder.Type">
            <summary>
            Gets the type of the known folder which is represented.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolder.Identity">
            <summary>
            Gets the <see cref="T:System.Security.Principal.WindowsIdentity"/> of the user whose folder properties are provided.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolder.DefaultPath">
            <summary>
            Gets the default path of the folder. This does not require the folder to be existent.
            </summary>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">The path could not be retrieved.</exception>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolder.DisplayName">
            <summary>
            Gets the user friendly name of the folder as displayed in the File Explorer.
            </summary>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">The name could not be retrieved.</exception>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolder.Path">
            <summary>
            Gets or sets the path as currently configured. This does not require the folder to be existent.
            </summary>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">The folder could not be retrieved or set.</exception>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolder.ExpandedPath">
            <summary>
            Gets or sets the path as currently configured, with all environment variables expanded.
            This does not require the folder to be existent.
            </summary>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">The path could not be retrieved or set.</exception>
        </member>
        <member name="M:Syroot.Windows.IO.KnownFolder.Create">
            <summary>
            Creates the folder using its Desktop.ini settings.
            </summary>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">The folder could not be created.</exception>
        </member>
        <member name="T:Syroot.Windows.IO.KnownFolders">
            <summary>
            A collection of properties to retrieve specific file system paths for the current user.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.AccountPictures">
            <summary>
            The per-user Account Pictures folder. Introduced in Windows 8.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\AccountPictures&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.AdminTools">
            <summary>
            The per-user Administrative Tools folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Start Menu\Programs\Administrative Tools&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.AppDataDesktop">
            <summary>
            The per-user app desktop folder, used internally by .NET applications to perform cross-platform app
            functionality. Introduced in Windows 10.
            Defaults to &quot;%LOCALAPPDATA%\Desktop&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.AppDataDocuments">
            <summary>
            The per-user app documents folder, used internally by .NET applications to perform cross-platform app
            functionality. Introduced in Windows 10.
            Defaults to &quot;%LOCALAPPDATA%\Documents&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.AppDataFavorites">
            <summary>
            The per-user app favorites folder, used internally by .NET applications to perform cross-platform app
            functionality. Introduced in Windows 10.
            Defaults to &quot;%LOCALAPPDATA%\Favorites&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.AppDataProgramData">
            <summary>
            The per-user app program data folder, used internally by .NET applications to perform cross-platform app
            functionality. Introduced in Windows 10.
            Defaults to &quot;%LOCALAPPDATA%\ProgramData&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.ApplicationShortcuts">
            <summary>
            The per-user Application Shortcuts folder. Introduced in Windows 8.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\Application Shortcuts&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.CameraRoll">
            <summary>
            The per-user Camera Roll folder. Introduced in Windows 8.1.
            Defaults to &quot;.%USERPROFILE%\Pictures\Camera Roll&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.CDBurning">
            <summary>
            The per-user Temporary Burn Folder.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\Burn\Burn&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.CommonAdminTools">
            <summary>
            The common Administrative Tools folder.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\Start Menu\Programs\Administrative Tools&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.CommonOemLinks">
            <summary>
            The common OEM Links folder.
            Defaults to &quot;%ALLUSERSPROFILE%\OEM Links&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.CommonPrograms">
            <summary>
            The common Programs folder.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\Start Menu\Programs&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.CommonStartMenu">
            <summary>
            The common Start Menu folder.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\Start Menu&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.CommonStartup">
            <summary>
            The common Startup folder.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\Start Menu\Programs\StartUp&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.CommonTemplates">
            <summary>
            The common Templates folder.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\Templates&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Contacts">
            <summary>
            The per-user Contacts folder. Introduced in Windows Vista.
            Defaults to &quot;%USERPROFILE%\Contacts&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Cookies">
            <summary>
            The per-user Cookies folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Cookies&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Desktop">
            <summary>
            The per-user Desktop folder.
            Defaults to &quot;%USERPROFILE%\Desktop&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.DeviceMetadataStore">
            <summary>
            The common DeviceMetadataStore folder. Introduced in Windows 7.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\DeviceMetadataStore&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Documents">
            <summary>
            The per-user Documents folder.
            Defaults to &quot;%USERPROFILE%\Documents&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.DocumentsLibrary">
            <summary>
            The per-user Documents library. Introduced in Windows 7.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Libraries\Documents.library-ms&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.DocumentsLocalized">
            <summary>
            The per-user localized Documents folder.
            Defaults to &quot;%USERPROFILE%\Documents&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Downloads">
            <summary>
            The per-user Downloads folder.
            Defaults to &quot;%USERPROFILE%\Downloads&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.DownloadsLocalized">
            <summary>
            The per-user localized Downloads folder.
            Defaults to &quot;%USERPROFILE%\Downloads&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Favorites">
            <summary>
            The per-user Favorites folder.
            Defaults to &quot;%USERPROFILE%\Favorites&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Fonts">
            <summary>
            The fixed Fonts folder.
            Points to &quot;%WINDIR%\Fonts&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.GameTasks">
            <summary>
            The per-user GameExplorer folder. Introduced in Windows Vista.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\GameExplorer&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.History">
            <summary>
            The per-user History folder.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\History&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.ImplicitAppShortcuts">
            <summary>
            The per-user ImplicitAppShortcuts folder. Introduced in Windows 7.
            Defaults to &quot;%APPDATA%\Microsoft\Internet Explorer\Quick Launch\User Pinned\ImplicitAppShortcuts&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.InternetCache">
            <summary>
            The per-user Temporary Internet Files folder.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\Temporary Internet Files&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Libraries">
            <summary>
            The per-user Libraries folder. Introduced in Windows 7.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Libraries&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Links">
            <summary>
            The per-user Links folder.
            Defaults to &quot;%USERPROFILE%\Links&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.LocalAppData">
            <summary>
            The per-user Local folder.
            Defaults to &quot;%LOCALAPPDATA%&quot; (&quot;%USERPROFILE%\AppData\Local&quot;)&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.LocalAppDataLow">
            <summary>
            The per-user LocalLow folder.
            Defaults to &quot;%USERPROFILE%\AppData\LocalLow&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.LocalizedResourcesDir">
            <summary>
            The fixed LocalizedResourcesDir folder.
            Points to &quot;%WINDIR%\resources\0409&quot; (code page).
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Music">
            <summary>
            The per-user Music folder.
            Defaults to &quot;%USERPROFILE%\Music&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.MusicLibrary">
            <summary>
            The per-user Music library. Introduced in Windows 7.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Libraries\Music.library-ms&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.MusicLocalized">
            <summary>
            The per-user localized Music folder.
            Defaults to &quot;%USERPROFILE%\Music&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.NetHood">
            <summary>
            The per-user Network Shortcuts folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Network Shortcuts&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Objects3D">
            <summary>
            The per-user 3D Objects folder. Introduced in Windows 10.
            Defaults to &quot;%USERPROFILE%\3D Objects&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.OriginalImages">
            <summary>
            The per-user Original Images folder. Introduced in Windows Vista.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows Photo Gallery\Original Images&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.PhotoAlbums">
            <summary>
            The per-user Slide Shows folder. Introduced in Windows Vista.
            Defaults to &quot;%USERPROFILE%\Pictures\Slide Shows&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Pictures">
            <summary>
            The per-user Pictures folder.
            Defaults to &quot;%USERPROFILE%\Pictures&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.PicturesLibrary">
            <summary>
            The per-user Pictures library. Introduced in Windows 7.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Libraries\Pictures.library-ms&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.PicturesLocalized">
            <summary>
            The per-user localized Pictures folder.
            Defaults to &quot;%USERPROFILE%\Pictures&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Playlists">
            <summary>
            The per-user Playlists folder.
            Defaults to &quot;%USERPROFILE%\Music\Playlists&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.PrintHood">
            <summary>
            The per-user Printer Shortcuts folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Printer Shortcuts&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Profile">
            <summary>
            The fixed user profile folder.
            Defaults to &quot;%USERPROFILE%&quot; (&quot;%SYSTEMDRIVE%\USERS\%USERNAME%&quot;)&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.ProgramData">
            <summary>
            The fixed ProgramData folder.
            Points to &quot;%ALLUSERSPROFILE%&quot; (&quot;%PROGRAMDATA%&quot;, &quot;%SYSTEMDRIVE%\ProgramData&quot;).
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.ProgramFiles">
            <summary>
            The fixed Program Files folder.
            This is the same as the <see cref="P:Syroot.Windows.IO.KnownFolders.ProgramFilesX86"/> known folder in 32-bit applications or the
            <see cref="P:Syroot.Windows.IO.KnownFolders.ProgramFilesX64"/> known folder in 64-bit applications.
            Points to %SYSTEMDRIVE%\Program Files on a 32-bit operating system or in 64-bit applications on a 64-bit
            operating system and to %SYSTEMDRIVE%\Program Files (x86) in 32-bit applications on a 64-bit operating
            system.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.ProgramFilesX64">
            <summary>
            The fixed Program Files folder (64-bit forced).
            This known folder is unsupported in 32-bit applications.
            Points to %SYSTEMDRIVE%\Program Files.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.ProgramFilesX86">
            <summary>
            The fixed Program Files folder (32-bit forced).
            This is the same as the <see cref="P:Syroot.Windows.IO.KnownFolders.ProgramFiles"/> known folder in 32-bit applications.
            Points to &quot;%SYSTEMDRIVE%\Program Files&quot; on a 32-bit operating system and to
            &quot;%SYSTEMDRIVE%\Program Files (x86)&quot; on a 64-bit operating system.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.ProgramFilesCommon">
            <summary>
            The fixed Common Files folder.
            This is the same as the <see cref="P:Syroot.Windows.IO.KnownFolders.ProgramFilesCommonX86"/> known folder in 32-bit applications or the
            <see cref="P:Syroot.Windows.IO.KnownFolders.ProgramFilesCommonX64"/> known folder in 64-bit applications.
            Points to&quot; %PROGRAMFILES%\Common Files&quot; on a 32-bit operating system or in 64-bit applications on
            a 64-bit operating system and to &quot;%PROGRAMFILES(X86)%\Common Files&quot; in 32-bit applications on a
            64-bit operating system.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.ProgramFilesCommonX64">
            <summary>
            The fixed Common Files folder (64-bit forced).
            This known folder is unsupported in 32-bit applications.
            Points to &quot;%PROGRAMFILES%\Common Files&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.ProgramFilesCommonX86">
            <summary>
            The fixed Common Files folder (32-bit forced).
            This is the same as the <see cref="P:Syroot.Windows.IO.KnownFolders.ProgramFilesCommon"/> known folder in 32-bit applications.
            Points to &quot;%PROGRAMFILES%\Common Files&quot; on a 32-bit operating system and to
            &quot;%PROGRAMFILES(X86)%\Common Files&quot; on a 64-bit operating system.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Programs">
            <summary>
            The per-user Programs folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Start Menu\Programs&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Public">
            <summary>
            The fixed Public folder. Introduced in Windows Vista.
            Defaults to &quot;%PUBLIC%&quot; (&quot;%SYSTEMDRIVE%\Users\Public)&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.PublicDesktop">
            <summary>
            The common Public Desktop folder.
            Defaults to &quot;%PUBLIC%\Desktop&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.PublicDocuments">
            <summary>
            The common Public Documents folder.
            Defaults to &quot;%PUBLIC%\Documents&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.PublicDownloads">
            <summary>
            The common Public Downloads folder. Introduced in Windows Vista.
            Defaults to &quot;%PUBLIC%\Downloads&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.PublicGameTasks">
            <summary>
            The common GameExplorer folder. Introduced in Windows Vista.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\GameExplorer&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.PublicLibraries">
            <summary>
            The common Libraries folder. Introduced in Windows 7.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\Libraries&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.PublicMusic">
            <summary>
            The common Public Music folder.
            Defaults to &quot;%PUBLIC%\Music&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.PublicPictures">
            <summary>
            The common Public Pictures folder.
            Defaults to &quot;%PUBLIC%\Pictures&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.PublicRingtones">
            <summary>
            The common Ringtones folder. Introduced in Windows 7.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\Ringtones&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.PublicUserTiles">
            <summary>
            The common Public Account Pictures folder. Introduced in Windows 8.
            Defaults to &quot;%PUBLIC%\AccountPictures&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.PublicVideos">
            <summary>
            The common Public Videos folder.
            Defaults to &quot;%PUBLIC%\Videos&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.QuickLaunch">
            <summary>
            The per-user Quick Launch folder.
            Defaults to &quot;%APPDATA%\Microsoft\Internet Explorer\Quick Launch&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Recent">
            <summary>
            The per-user Recent Items folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Recent&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.RecordedTVLibrary">
            <summary>
            The common Recorded TV library. Introduced in Windows 7.
            Defaults to &quot;%PUBLIC%\RecordedTV.library-ms&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.ResourceDir">
            <summary>
            The fixed Resources folder.
            Points to &quot;%WINDIR%\Resources&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Ringtones">
            <summary>
            The per-user Ringtones folder. Introduced in Windows 7.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\Ringtones&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.RoamingAppData">
            <summary>
            The per-user Roaming folder.
            Defaults to &quot;%APPDATA%&quot; (&quot;%USERPROFILE%\AppData\Roaming&quot;).
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.RoamedTileImages">
            <summary>
            The per-user RoamedTileImages folder. Introduced in Windows 8.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\RoamedTileImages&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.RoamingTiles">
            <summary>
            The per-user RoamingTiles folder. Introduced in Windows 8.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\RoamingTiles&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.SampleMusic">
            <summary>
            The common Sample Music folder.
            Defaults to &quot;%PUBLIC%\Music\Sample Music&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.SamplePictures">
            <summary>
            The common Sample Pictures folder.
            Defaults to &quot;%PUBLIC%\Pictures\Sample Pictures&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.SamplePlaylists">
            <summary>
            The common Sample Playlists folder. Introduced in Windows Vista.
            Defaults to &quot;%PUBLIC%\Music\Sample Playlists&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.SampleVideos">
            <summary>
            The common Sample Videos folder.
            Defaults to &quot;%PUBLIC%\Videos\Sample Videos&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.SavedGames">
            <summary>
            The per-user Saved Games folder. Introduced in Windows Vista.
            Defaults to &quot;%USERPROFILE%\Saved Games&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.SavedSearches">
            <summary>
            The per-user Searches folder.
            Defaults to &quot;%USERPROFILE%\Searches&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Screenshots">
            <summary>
            The per-user Screenshots folder. Introduced in Windows 8.
            Defaults to &quot;%USERPROFILE%\Pictures\Screenshots&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.SearchHistory">
            <summary>
            The per-user History folder. Introduced in Windows 8.1.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\ConnectedSearch\History&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.SearchTemplates">
            <summary>
            The per-user Templates folder. Introduced in Windows 8.1.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\ConnectedSearch\Templates&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.SendTo">
            <summary>
            The per-user SendTo folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\SendTo&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.SidebarDefaultParts">
            <summary>
            The common Gadgets folder. Introduced in Windows 7.
            Defaults to &quot;%ProgramFiles%\Windows Sidebar\Gadgets&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.SidebarParts">
            <summary>
            The per-user Gadgets folder. Introduced in Windows 7.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows Sidebar\Gadgets&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.SkyDrive">
            <summary>
            The per-user OneDrive folder. Introduced in Windows 8.1.
            Defaults to &quot;%USERPROFILE%\OneDrive&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.SkyDriveCameraRoll">
            <summary>
            The per-user OneDrive Camera Roll folder. Introduced in Windows 8.1.
            Defaults to &quot;%USERPROFILE%\OneDrive\Pictures\Camera Roll&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.SkyDriveDocuments">
            <summary>
            The per-user OneDrive Documents folder. Introduced in Windows 8.1.
            Defaults to &quot;%USERPROFILE%\OneDrive\Documents&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.SkyDrivePictures">
            <summary>
            The per-user OneDrive Pictures folder. Introduced in Windows 8.1.
            Defaults to &quot;%USERPROFILE%\OneDrive\Pictures&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.StartMenu">
            <summary>
            The per-user Start Menu folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Start Menu&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Startup">
            <summary>
            The per-user Startup folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Start Menu\Programs\StartUp&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.System">
            <summary>
            The fixed System32 folder.
            This is the same as the <see cref="P:Syroot.Windows.IO.KnownFolders.SystemX86"/> known folder in 32-bit applications.
            Points to &quot;%WINDIR%\system32&quot; on 32-bit operating systems or in 64-bit applications on a 64-bit
            operating system and to &quot;%WINDIR%\syswow64&quot; in 32-bit applications on a 64-bit operating system.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.SystemX86">
            <summary>
            The fixed System32 folder (32-bit forced).
            This is the same as the <see cref="P:Syroot.Windows.IO.KnownFolders.System"/> known folder in 32-bit applications.
            Points to &quot;%WINDIR%\syswow64&quot; in 64-bit applications or in 32-bit applications on a 64-bit
            operating system and to &quot;%WINDIR%\system32&quot; on 32-bit operating systems.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Templates">
            <summary>
            The per-user Templates folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Templates&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.UserPinned">
            <summary>
            The per-user User Pinned folder. Introduced in Windows 7.
            Defaults to &quot;%APPDATA%\Microsoft\Internet Explorer\Quick Launch\User Pinned&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.UserProfiles">
            <summary>
            The fixed Users folder. Introduced in Windows Vista.
            Points to &quot;%SYSTEMDRIVE%\Users&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.UserProgramFiles">
            <summary>
            The per-user Programs folder. Introduced in Windows 7.
            Defaults to &quot;%LOCALAPPDATA%\Programs.&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.UserProgramFilesCommon">
            <summary>
            The per-user common Programs folder. INtroduced in Windows 7.
            Defaults to &quot;%LOCALAPPDATA%\Programs\Common&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Videos">
            <summary>
            The per-user Videos folder.
            Defaults to &quot;%USERPROFILE%\Videos&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.VideosLibrary">
            <summary>
            The per-user Videos library. Introduced in Windows 7.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Libraries\Videos.library-ms&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.VideosLocalized">
            <summary>
            The per-user localized Videos folder.
            Defaults to &quot;%USERPROFILE%\Videos&quot;.
            </summary>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolders.Windows">
            <summary>
            The fixed Windows folder.
            Points to &quot;%WINDIR%&quot;.
            </summary>
        </member>
        <member name="T:Syroot.Windows.IO.KnownFolderType">
            <summary>
            Represents the list of standard folders registered with the system. These folders are installed with Windows
            Vista and later operating systems, and a computer will have only folders appropriate to it installed.
            </summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/en-us/windows/win32/shell/knownfolderid">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.AccountPictures">
            <summary>
            The per-user Account Pictures folder. Introduced in Windows 8.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\AccountPictures&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.AdminTools">
            <summary>
            The per-user Administrative Tools folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Start Menu\Programs\Administrative Tools&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.AppDataDesktop">
            <summary>
            The per-user app desktop folder, used internally by .NET applications to perform cross-platform app
            functionality. Introduced in Windows 10.
            Defaults to &quot;%LOCALAPPDATA%\Desktop&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.AppDataDocuments">
            <summary>
            The per-user app documents folder, used internally by .NET applications to perform cross-platform app
            functionality. Introduced in Windows 10.
            Defaults to &quot;%LOCALAPPDATA%\Documents&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.AppDataFavorites">
            <summary>
            The per-user app favorites folder, used internally by .NET applications to perform cross-platform app
            functionality. Introduced in Windows 10.
            Defaults to &quot;%LOCALAPPDATA%\Favorites&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.AppDataProgramData">
            <summary>
            The per-user app program data folder, used internally by .NET applications to perform cross-platform app
            functionality. Introduced in Windows 10.
            Defaults to &quot;%LOCALAPPDATA%\ProgramData&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.ApplicationShortcuts">
            <summary>
            The per-user Application Shortcuts folder. Introduced in Windows 8.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\Application Shortcuts&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.CameraRoll">
            <summary>
            The per-user Camera Roll folder. Introduced in Windows 8.1.
            Defaults to &quot;.%USERPROFILE%\Pictures\Camera Roll&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.CDBurning">
            <summary>
            The per-user Temporary Burn Folder.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\Burn\Burn&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.CommonAdminTools">
            <summary>
            The common Administrative Tools folder.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\Start Menu\Programs\Administrative Tools&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.CommonOemLinks">
            <summary>
            The common OEM Links folder.
            Defaults to &quot;%ALLUSERSPROFILE%\OEM Links&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.CommonPrograms">
            <summary>
            The common Programs folder.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\Start Menu\Programs&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.CommonStartMenu">
            <summary>
            The common Start Menu folder.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\Start Menu&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.CommonStartup">
            <summary>
            The common Startup folder.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\Start Menu\Programs\StartUp&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.CommonTemplates">
            <summary>
            The common Templates folder.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\Templates&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Contacts">
            <summary>
            The per-user Contacts folder. Introduced in Windows Vista.
            Defaults to &quot;%USERPROFILE%\Contacts&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Cookies">
            <summary>
            The per-user Cookies folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Cookies&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Desktop">
            <summary>
            The per-user Desktop folder.
            Defaults to &quot;%USERPROFILE%\Desktop&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.DeviceMetadataStore">
            <summary>
            The common DeviceMetadataStore folder. Introduced in Windows 7.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\DeviceMetadataStore&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Documents">
            <summary>
            The per-user Documents folder.
            Defaults to &quot;%USERPROFILE%\Documents&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.DocumentsLibrary">
            <summary>
            The per-user Documents library. Introduced in Windows 7.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Libraries\Documents.library-ms&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.DocumentsLocalized">
            <summary>
            The per-user localized Documents folder.
            Defaults to &quot;%USERPROFILE%\Documents&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Downloads">
            <summary>
            The per-user Downloads folder.
            Defaults to &quot;%USERPROFILE%\Downloads&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.DownloadsLocalized">
            <summary>
            The per-user localized Downloads folder.
            Defaults to &quot;%USERPROFILE%\Downloads&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Favorites">
            <summary>
            The per-user Favorites folder.
            Defaults to &quot;%USERPROFILE%\Favorites&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Fonts">
            <summary>
            The fixed Fonts folder.
            Points to &quot;%WINDIR%\Fonts&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.GameTasks">
            <summary>
            The per-user GameExplorer folder. Introduced in Windows Vista.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\GameExplorer&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.History">
            <summary>
            The per-user History folder.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\History&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.ImplicitAppShortcuts">
            <summary>
            The per-user ImplicitAppShortcuts folder. Introduced in Windows 7.
            Defaults to &quot;%APPDATA%\Microsoft\Internet Explorer\Quick Launch\User Pinned\ImplicitAppShortcuts&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.InternetCache">
            <summary>
            The per-user Temporary Internet Files folder.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\Temporary Internet Files&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Libraries">
            <summary>
            The per-user Libraries folder. Introduced in Windows 7.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Libraries&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Links">
            <summary>
            The per-user Links folder.
            Defaults to &quot;%USERPROFILE%\Links&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.LocalAppData">
            <summary>
            The per-user Local folder.
            Defaults to &quot;%LOCALAPPDATA%&quot; (&quot;%USERPROFILE%\AppData\Local&quot;)&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.LocalAppDataLow">
            <summary>
            The per-user LocalLow folder.
            Defaults to &quot;%USERPROFILE%\AppData\LocalLow&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.LocalizedResourcesDir">
            <summary>
            The fixed LocalizedResourcesDir folder.
            Points to &quot;%WINDIR%\resources\0409&quot; (code page).
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Music">
            <summary>
            The per-user Music folder.
            Defaults to &quot;%USERPROFILE%\Music&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.MusicLibrary">
            <summary>
            The per-user Music library. Introduced in Windows 7.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Libraries\Music.library-ms&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.MusicLocalized">
            <summary>
            The per-user localized Music folder.
            Defaults to &quot;%USERPROFILE%\Music&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.NetHood">
            <summary>
            The per-user Network Shortcuts folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Network Shortcuts&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Objects3D">
            <summary>
            The per-user 3D Objects folder. Introduced in Windows 10.
            Defaults to &quot;%USERPROFILE%\3D Objects&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.OriginalImages">
            <summary>
            The per-user Original Images folder. Introduced in Windows Vista.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows Photo Gallery\Original Images&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.PhotoAlbums">
            <summary>
            The per-user Slide Shows folder. Introduced in Windows Vista.
            Defaults to &quot;%USERPROFILE%\Pictures\Slide Shows&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.PicturesLibrary">
            <summary>
            The per-user Pictures library. Introduced in Windows 7.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Libraries\Pictures.library-ms&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Pictures">
            <summary>
            The per-user Pictures folder.
            Defaults to &quot;%USERPROFILE%\Pictures&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.PicturesLocalized">
            <summary>
            The per-user localized Pictures folder.
            Defaults to &quot;%USERPROFILE%\Pictures&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Playlists">
            <summary>
            The per-user Playlists folder.
            Defaults to &quot;%USERPROFILE%\Music\Playlists&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.PrintHood">
            <summary>
            The per-user Printer Shortcuts folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Printer Shortcuts&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Profile">
            <summary>
            The fixed user profile folder.
            Defaults to &quot;%USERPROFILE%&quot; (&quot;%SYSTEMDRIVE%\USERS\%USERNAME%&quot;)&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.ProgramData">
            <summary>
            The fixed ProgramData folder.
            Points to &quot;%ALLUSERSPROFILE%&quot; (&quot;%PROGRAMDATA%&quot;,
            &quot;%SYSTEMDRIVE%\ProgramData&quot;).
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.ProgramFiles">
            <summary>
            The fixed Program Files folder.
            This is the same as the <see cref="F:Syroot.Windows.IO.KnownFolderType.ProgramFilesX86"/> known folder in 32-bit applications or the
            <see cref="F:Syroot.Windows.IO.KnownFolderType.ProgramFilesX64"/> known folder in 64-bit applications.
            Points to %SYSTEMDRIVE%\Program Files on a 32-bit operating system or in 64-bit applications on a 64-bit
            operating system and to %SYSTEMDRIVE%\Program Files (x86) in 32-bit applications on a 64-bit operating
            system.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.ProgramFilesX64">
            <summary>
            The fixed Program Files folder (64-bit forced).
            This known folder is unsupported in 32-bit applications.
            Points to %SYSTEMDRIVE%\Program Files.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.ProgramFilesX86">
            <summary>
            The fixed Program Files folder (32-bit forced).
            This is the same as the <see cref="F:Syroot.Windows.IO.KnownFolderType.ProgramFiles"/> known folder in 32-bit applications.
            Points to &quot;%SYSTEMDRIVE%\Program Files&quot; on a 32-bit operating system and to
            &quot;%SYSTEMDRIVE%\Program Files (x86)&quot; on a 64-bit operating system.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.ProgramFilesCommon">
            <summary>
            The fixed Common Files folder.
            This is the same as the <see cref="F:Syroot.Windows.IO.KnownFolderType.ProgramFilesCommonX86"/> known folder in 32-bit applications or the
            <see cref="F:Syroot.Windows.IO.KnownFolderType.ProgramFilesCommonX64"/> known folder in 64-bit applications.
            Points to&quot; %PROGRAMFILES%\Common Files&quot; on a 32-bit operating system or in 64-bit applications on
            a 64-bit operating system and to &quot;%PROGRAMFILES(X86)%\Common Files&quot; in 32-bit applications on a
            64-bit operating system.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.ProgramFilesCommonX64">
            <summary>
            The fixed Common Files folder (64-bit forced).
            This known folder is unsupported in 32-bit applications.
            Points to &quot;%PROGRAMFILES%\Common Files&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.ProgramFilesCommonX86">
            <summary>
            The fixed Common Files folder (32-bit forced).
            This is the same as the <see cref="F:Syroot.Windows.IO.KnownFolderType.ProgramFilesCommon"/> known folder in 32-bit applications.
            Points to &quot;%PROGRAMFILES%\Common Files&quot; on a 32-bit operating system and to
            &quot;%PROGRAMFILES(X86)%\Common Files&quot; on a 64-bit operating system.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Programs">
            <summary>
            The per-user Programs folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Start Menu\Programs&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Public">
            <summary>
            The fixed Public folder. Introduced in Windows Vista.
            Defaults to &quot;%PUBLIC%&quot; (&quot;%SYSTEMDRIVE%\Users\Public)&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.PublicDesktop">
            <summary>
            The common Public Desktop folder.
            Defaults to &quot;%PUBLIC%\Desktop&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.PublicDocuments">
            <summary>
            The common Public Documents folder.
            Defaults to &quot;%PUBLIC%\Documents&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.PublicDownloads">
            <summary>
            The common Public Downloads folder. Introduced in Windows Vista.
            Defaults to &quot;%PUBLIC%\Downloads&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.PublicGameTasks">
            <summary>
            The common GameExplorer folder. Introduced in Windows Vista.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\GameExplorer&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.PublicLibraries">
            <summary>
            The common Libraries folder. Introduced in Windows 7.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\Libraries&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.PublicMusic">
            <summary>
            The common Public Music folder.
            Defaults to &quot;%PUBLIC%\Music&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.PublicPictures">
            <summary>
            The common Public Pictures folder.
            Defaults to &quot;%PUBLIC%\Pictures&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.PublicRingtones">
            <summary>
            The common Ringtones folder. Introduced in Windows 7.
            Defaults to &quot;%ALLUSERSPROFILE%\Microsoft\Windows\Ringtones&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.PublicUserTiles">
            <summary>
            The common Public Account Pictures folder. Introduced in Windows 8.
            Defaults to &quot;%PUBLIC%\AccountPictures&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.PublicVideos">
            <summary>
            The common Public Videos folder.
            Defaults to &quot;%PUBLIC%\Videos&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.QuickLaunch">
            <summary>
            The per-user Quick Launch folder.
            Defaults to &quot;%APPDATA%\Microsoft\Internet Explorer\Quick Launch&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Recent">
            <summary>
            The per-user Recent Items folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Recent&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.RecordedTVLibrary">
            <summary>
            The common Recorded TV library. Introduced in Windows 7.
            Defaults to &quot;%PUBLIC%\RecordedTV.library-ms&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.ResourceDir">
            <summary>
            The fixed Resources folder.
            Points to &quot;%WINDIR%\Resources&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Ringtones">
            <summary>
            The per-user Ringtones folder. Introduced in Windows 7.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\Ringtones&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.RoamingAppData">
            <summary>
            The per-user Roaming folder.
            Defaults to &quot;%APPDATA%&quot; (&quot;%USERPROFILE%\AppData\Roaming&quot;).
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.RoamedTileImages">
            <summary>
            The per-user RoamedTileImages folder. Introduced in Windows 8.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\RoamedTileImages&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.RoamingTiles">
            <summary>
            The per-user RoamingTiles folder. Introduced in Windows 8.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\RoamingTiles&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.SampleMusic">
            <summary>
            The common Sample Music folder.
            Defaults to &quot;%PUBLIC%\Music\Sample Music&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.SamplePictures">
            <summary>
            The common Sample Pictures folder.
            Defaults to &quot;%PUBLIC%\Pictures\Sample Pictures&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.SamplePlaylists">
            <summary>
            The common Sample Playlists folder. Introduced in Windows Vista.
            Defaults to &quot;%PUBLIC%\Music\Sample Playlists&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.SampleVideos">
            <summary>
            The common Sample Videos folder.
            Defaults to &quot;%PUBLIC%\Videos\Sample Videos&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.SavedGames">
            <summary>
            The per-user Saved Games folder. Introduced in Windows Vista.
            Defaults to &quot;%USERPROFILE%\Saved Games&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.SavedSearches">
            <summary>
            The per-user Searches folder.
            Defaults to &quot;%USERPROFILE%\Searches&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Screenshots">
            <summary>
            The per-user Screenshots folder. Introduced in Windows 8.
            Defaults to &quot;%USERPROFILE%\Pictures\Screenshots&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.SearchHistory">
            <summary>
            The per-user History folder. Introduced in Windows 8.1.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\ConnectedSearch\History&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.SearchTemplates">
            <summary>
            The per-user Templates folder. Introduced in Windows 8.1.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows\ConnectedSearch\Templates&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.SendTo">
            <summary>
            The per-user SendTo folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\SendTo&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.SidebarDefaultParts">
            <summary>
            The common Gadgets folder. Introduced in Windows 7.
            Defaults to &quot;%ProgramFiles%\Windows Sidebar\Gadgets&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.SidebarParts">
            <summary>
            The per-user Gadgets folder. Introduced in Windows 7.
            Defaults to &quot;%LOCALAPPDATA%\Microsoft\Windows Sidebar\Gadgets&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.SkyDrive">
            <summary>
            The per-user OneDrive folder. Introduced in Windows 8.1.
            Defaults to &quot;%USERPROFILE%\OneDrive&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.SkyDriveCameraRoll">
            <summary>
            The per-user OneDrive Camera Roll folder. Introduced in Windows 8.1.
            Defaults to &quot;%USERPROFILE%\OneDrive\Pictures\Camera Roll&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.SkyDriveDocuments">
            <summary>
            The per-user OneDrive Documents folder. Introduced in Windows 8.1.
            Defaults to &quot;%USERPROFILE%\OneDrive\Documents&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.SkyDrivePictures">
            <summary>
            The per-user OneDrive Pictures folder. Introduced in Windows 8.1.
            Defaults to &quot;%USERPROFILE%\OneDrive\Pictures&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.StartMenu">
            <summary>
            The per-user Start Menu folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Start Menu&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Startup">
            <summary>
            The per-user Startup folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Start Menu\Programs\StartUp&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.System">
            <summary>
            The fixed System32 folder.
            This is the same as the <see cref="F:Syroot.Windows.IO.KnownFolderType.SystemX86"/> known folder in 32-bit applications.
            Points to &quot;%WINDIR%\system32&quot; on 32-bit operating systems or in 64-bit applications on a 64-bit
            operating system and to &quot;%WINDIR%\syswow64&quot; in 32-bit applications on a 64-bit operating system.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.SystemX86">
            <summary>
            The fixed System32 folder (32-bit forced).
            This is the same as the <see cref="F:Syroot.Windows.IO.KnownFolderType.System"/> known folder in 32-bit applications.
            Points to &quot;%WINDIR%\syswow64&quot; in 64-bit applications or in 32-bit applications on a 64-bit
            operating system and to &quot;%WINDIR%\system32&quot; on 32-bit operating systems.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Templates">
            <summary>
            The per-user Templates folder.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Templates&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.UserPinned">
            <summary>
            The per-user User Pinned folder. Introduced in Windows 7.
            Defaults to &quot;%APPDATA%\Microsoft\Internet Explorer\Quick Launch\User Pinned&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.UserProfiles">
            <summary>
            The fixed Users folder. Introduced in Windows Vista.
            Points to &quot;%SYSTEMDRIVE%\Users&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.UserProgramFiles">
            <summary>
            The per-user Programs folder. Introduced in Windows 7.
            Defaults to &quot;%LOCALAPPDATA%\Programs.&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.UserProgramFilesCommon">
            <summary>
            The per-user common Programs folder. INtroduced in Windows 7.
            Defaults to &quot;%LOCALAPPDATA%\Programs\Common&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Videos">
            <summary>
            The per-user Videos folder.
            Defaults to &quot;%USERPROFILE%\Videos&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.VideosLibrary">
            <summary>
            The per-user Videos library. Introduced in Windows 7.
            Defaults to &quot;%APPDATA%\Microsoft\Windows\Libraries\Videos.library-ms&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.VideosLocalized">
            <summary>
            The per-user localized Videos folder.
            Defaults to &quot;%USERPROFILE%\Videos&quot;.
            </summary>
        </member>
        <member name="F:Syroot.Windows.IO.KnownFolderType.Windows">
            <summary>
            The fixed Windows folder.
            Points to &quot;%WINDIR%&quot;.
            </summary>
        </member>
        <member name="T:Syroot.Windows.IO.KnownFolderTypeExtensions">
            <summary>
            Represents extension methods for the <see cref="T:Syroot.Windows.IO.KnownFolderType"/> type.
            </summary>
        </member>
        <member name="M:Syroot.Windows.IO.KnownFolderTypeExtensions.GetGuid(Syroot.Windows.IO.KnownFolderType)">
            <summary>
            Gets the <see cref="T:System.Guid"/> with which the <see cref="T:Syroot.Windows.IO.KnownFolderType"/> enumeration member has been
            decorated.
            </summary>
            <param name="value">The decorated <see cref="T:Syroot.Windows.IO.KnownFolderType"/> enumeration member.</param>
            <returns>The <see cref="T:System.Guid"/> of the <see cref="T:Syroot.Windows.IO.KnownFolderType"/>.</returns>
        </member>
        <member name="T:Syroot.Windows.IO.KnownFolderGuidAttribute">
            <summary>
            Represents an attribute to decorate the members of the <see cref="T:Syroot.Windows.IO.KnownFolderType"/> enumeration with their
            corresponding <see cref="P:Syroot.Windows.IO.KnownFolderGuidAttribute.Guid"/> on the Windows system.
            </summary>
        </member>
        <member name="M:Syroot.Windows.IO.KnownFolderGuidAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syroot.Windows.IO.KnownFolderGuidAttribute"/> class with the given string
            representing the GUID of the <see cref="T:Syroot.Windows.IO.KnownFolderType"/>.
            </summary>
            <param name="guid">The GUID string of the <see cref="T:Syroot.Windows.IO.KnownFolderType"/>.</param>
        </member>
        <member name="P:Syroot.Windows.IO.KnownFolderGuidAttribute.Guid">
            <summary>
            Gets the <see cref="P:Syroot.Windows.IO.KnownFolderGuidAttribute.Guid"/> for the <see cref="T:Syroot.Windows.IO.KnownFolderType"/> enumeration member.
            </summary>
        </member>
        <member name="T:Windows.Win32.System.Com.BIND_OPTS">
            <summary>Contains parameters used during a moniker-binding operation.</summary>
            <remarks>
            <para>A <b>BIND_OPTS</b> structure is stored in a bind context; the same bind context is used by each component of a composite moniker during binding, allowing the same parameters to be passed to all components of a composite moniker. See <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a> for more information about bind contexts. Moniker clients (use a moniker to acquire an interface pointer to an object) typically do not need to specify values for the members of this structure. The <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-createbindctx">CreateBindCtx</a> function creates a bind context with the bind options set to default values that are suitable for most situations; the <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-bindmoniker">BindMoniker</a> function does the same thing when creating a bind context for use in binding a moniker. If you want to modify the values of these bind options, you can do so by passing a <b>BIND_OPTS</b> structure to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ibindctx-setbindoptions">IBindCtx::SetBindOptions</a> method. Moniker implementers can pass a <b>BIND_OPTS</b> structure to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ibindctx-getbindoptions">IBindCtx::GetBindOptions</a> method to retrieve the values of these bind options.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/ns-objidl-bind_opts#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.BIND_OPTS.cbStruct">
            <summary>The size of this structure, in bytes.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.BIND_OPTS.grfFlags">
            <summary>Flags that control aspects of moniker binding operations. This value is any combination of the bit flags in the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ne-objidl-bind_flags">BIND_FLAGS</a> enumeration. The <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-createbindctx">CreateBindCtx</a> function initializes this member to zero.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.BIND_OPTS.grfMode">
            <summary>Flags that should be used when opening the file that contains the object identified by the moniker. Possible values  are the <a href="https://docs.microsoft.com/windows/desktop/Stg/stgm-constants">STGM constants</a>. The binding operation uses these flags in the call to <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ipersistfile-load">IPersistFile::Load</a> when loading the file. If the object is already running, these flags are ignored by the binding operation. The <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-createbindctx">CreateBindCtx</a> function initializes this field to STGM_READWRITE.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.BIND_OPTS.dwTickCountDeadline">
            <summary>
            <para>The clock time by which the caller would like the binding operation to be completed, in milliseconds. This member lets the caller limit the execution time of an operation when speed is of primary importance. A value of zero indicates that there is no deadline. Callers most often use this capability when calling the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-gettimeoflastchange">IMoniker::GetTimeOfLastChange</a> method, though it can be usefully applied to other operations as well. The <a href="https://docs.microsoft.com/windows/desktop/api/objbase/nf-objbase-createbindctx">CreateBindCtx</a> function initializes this field to zero. Typical deadlines allow for a few hundred milliseconds of execution. This deadline is a recommendation, not a requirement; however, operations that exceed their deadline by a large amount may cause delays for the end user. Each moniker implementation should try to complete its operation by the deadline, or fail with the error MK_E_EXCEEDEDDEADLINE. If a binding operation exceeds its deadline because one or more objects that it needs are not running, the moniker implementation should register the objects responsible in the bind context using the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-ibindctx-registerobjectparam">IBindCtx::RegisterObjectParam</a>. The objects should be registered under the parameter names "ExceededDeadline", "ExceededDeadline1", "ExceededDeadline2", and so on. If the caller later finds the object in the running object table, the caller can retry the binding operation. The <a href="https://docs.microsoft.com/windows/desktop/api/sysinfoapi/nf-sysinfoapi-gettickcount">GetTickCount</a> function indicates the number of milliseconds since system startup, and wraps back to zero after 2^31 milliseconds. Consequently, callers should be careful not to inadvertently pass a zero value (which indicates no deadline), and moniker implementations should be aware of clock wrapping problems.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/ns-objidl-bind_opts#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.RegisterObjectBound(System.Object)">
            <summary>Registers an object with the bind context to ensure that the object remains active until the bind context is released.</summary>
            <param name="punk">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a> interface on the object that is being registered as bound.</param>
            <returns>This method can return the standard return values E_OUTOFMEMORY and S_OK.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ibindctx-registerobjectbound">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.RevokeObjectBound(System.Object)">
            <summary>Removes the object from the bind context, undoing a previous call to RegisterObjectBound.</summary>
            <param name="punk">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/com/iunknown-and-interface-inheritance">IUnknown</a> interface on the object to be removed.</param>
            <returns>
            <para>This method can return the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ibindctx-revokeobjectbound">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.ReleaseBoundObjects">
            <summary>Releases all pointers to all objects that were previously registered by calls to RegisterObjectBound.</summary>
            <returns>If this method succeeds, it returns <b xmlns:loc="http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns:loc="http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ibindctx-releaseboundobjects">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.SetBindOptions(Windows.Win32.System.Com.BIND_OPTS*)">
            <summary>Sets new values for the binding parameters stored in the bind context.</summary>
            <param name="pbindopts">A pointer to a [BIND_OPTS3](/windows/win32/api/objidl/ns-objidl-bind_opts3-r1) structure containing the binding parameters.</param>
            <returns>This method can return the standard return values E_OUTOFMEMORY and S_OK.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ibindctx-setbindoptions">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.GetBindOptions(Windows.Win32.System.Com.BIND_OPTS*)">
            <summary>Retrieves the binding options stored in this bind context.</summary>
            <param name="pbindopts">A pointer to an initialized structure that receives the current binding parameters on return. See [BIND_OPTS3](/windows/win32/api/objidl/ns-objidl-bind_opts3-r1).</param>
            <returns>This method can return the standard return values E_UNEXPECTED and S_OK.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ibindctx-getbindoptions">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.GetRunningObjectTable(Windows.Win32.System.Com.IRunningObjectTable@)">
            <summary>Retrieves an interface pointer to the running object table (ROT) for the computer on which this bind context is running.</summary>
            <param name="pprot">The address of a <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-irunningobjecttable">IRunningObjectTable</a>* pointer variable that receives the interface pointer to the running object table. If an error occurs, *<i>pprot</i> is set to <b>NULL</b>. If *<i>pprot</i> is non-<b>NULL</b>, the implementation calls <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the running table object; it is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>.</param>
            <returns>This method can return the standard return values E_OUTOFMEMORY, E_UNEXPECTED, and S_OK.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ibindctx-getrunningobjecttable">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.RegisterObjectParam(Windows.Win32.Foundation.PWSTR,System.Object)">
            <summary>Associates an object with a string key in the bind context's string-keyed table of pointers.</summary>
            <param name="pszKey">The <a href="https://docs.microsoft.com/windows/desktop/shell/str-constants">bind context string key</a> under which the object is being registered. Key string comparison is case-sensitive.</param>
            <param name="punk">
            <para>A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a> interface on the object that is to be registered. The method calls <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the pointer.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ibindctx-registerobjectparam#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>This method can return the standard return values E_OUTOFMEMORY and S_OK.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ibindctx-registerobjectparam">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.GetObjectParam(Windows.Win32.Foundation.PWSTR,System.Object@)">
            <summary>Retrieves an interface pointer to the object associated with the specified key in the bind context's string-keyed table of pointers.</summary>
            <param name="pszKey">The <a href="https://docs.microsoft.com/windows/desktop/shell/str-constants">bind context string key</a> to be searched for. Key string comparison is case-sensitive.</param>
            <param name="ppunk">The address of an <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a>* pointer variable that receives the interface pointer to the object associated with <i>pszKey</i>. When successful, the implementation calls <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on *<i>ppunk</i>. It is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If an error occurs, the implementation sets *<i>ppunk</i> to <b>NULL</b>.</param>
            <returns>If the method succeeds, the return value is S_OK. Otherwise, it is E_FAIL.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ibindctx-getobjectparam">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.EnumObjectParam(Windows.Win32.System.Com.IEnumString@)">
            <summary>Retrieves a pointer to an interface that can be used to enumerate the keys of the bind context's string-keyed table of pointers.</summary>
            <param name="ppenum">The address of an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienumstring">IEnumString</a>* pointer variable that receives the interface pointer to the enumerator. If an error occurs, *<i>ppenum</i> is set to <b>NULL</b>. If *<i>ppenum</i> is non-<b>NULL</b>, the implementation calls <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on *<i>ppenum</i>; it is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>.</param>
            <returns>This method can return the standard return values E_OUTOFMEMORY and S_OK.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ibindctx-enumobjectparam">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IBindCtx.RevokeObjectParam(Windows.Win32.Foundation.PWSTR)">
            <summary>Removes the specified key and its associated pointer from the bind context's string-keyed table of objects. The key must have previously been inserted into the table with a call to RegisterObjectParam.</summary>
            <param name="pszKey">The <a href="https://docs.microsoft.com/windows/desktop/shell/str-constants">bind context string key</a> to be removed. Key string comparison is case-sensitive.</param>
            <returns>
            <para>This method can return the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ibindctx-revokeobjectparam">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumMoniker.Next(System.UInt32,Windows.Win32.System.Com.IMoniker[],System.UInt32*)">
            <summary>Retrieves the specified number of items in the enumeration sequence.</summary>
            <param name="celt">The number of items to be retrieved. If there are fewer than the requested number of items left in the sequence, this method retrieves the remaining elements.</param>
            <param name="rgelt">
            <para>An array of enumerated items. The enumerator is responsible for calling <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a>, and the caller is responsible for calling <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a> through each pointer enumerated. If <i>celt</i> is greater than 1, the caller must also pass a non-<b>NULL</b> pointer passed to <i>pceltFetched</i> to know how many pointers to release.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ienummoniker-next#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pceltFetched">The number of items that were retrieved. This parameter is always less than or equal to the number of items requested. This parameter can be <b>NULL</b> if <i>celt</i> is 1.</param>
            <returns>If the method retrieves the number of items requested, the return value is S_OK. Otherwise, it is S_FALSE.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ienummoniker-next">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumMoniker.Skip(System.UInt32)">
            <summary>Skips over the specified number of items in the enumeration sequence.</summary>
            <param name="celt">The number of items to be skipped.</param>
            <returns>If the method skips the number of items requested, the return value is S_OK. Otherwise, it is S_FALSE.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ienummoniker-skip">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumMoniker.Reset">
            <summary>Resets the enumeration sequence to the beginning.</summary>
            <returns>This method returns S_OK on success.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ienummoniker-reset">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumMoniker.Clone(Windows.Win32.System.Com.IEnumMoniker@)">
            <summary>Creates a new enumerator that contains the same enumeration state as the current one.</summary>
            <param name="ppenum">Address of an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienummoniker">IEnumMoniker</a> pointer variable that receives the interface pointer to the enumeration object. If the method is unsuccessful, the value of this output variable is undefined.</param>
            <returns>
            <para>This method returns S_OK on success. Other possible values include the following. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ienummoniker-clone">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumString.Next(System.UInt32,Windows.Win32.Foundation.PWSTR*,System.UInt32*)">
            <summary>Retrieves the specified number of items in the enumeration sequence.</summary>
            <param name="celt">The number of items to be retrieved. If there are fewer than the requested number of items left in the sequence, this method retrieves the remaining elements.</param>
            <param name="rgelt">
            <para>An array of enumerated items. The enumerator is responsible for allocating any memory, and the caller is responsible for freeing it. If <i>celt</i> is greater than 1, the caller must also pass a non-NULL pointer passed to <i>pceltFetched</i> to know how many pointers to release.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ienumstring-next#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pceltFetched">The number of items that were retrieved. This parameter is always less than or equal to the number of items requested.</param>
            <returns>If the method retrieves the number of items requested, the return value is S_OK. Otherwise, it is S_FALSE.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ienumstring-next">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumString.Skip(System.UInt32)">
            <summary>Skips over the specified number of items in the enumeration sequence.</summary>
            <param name="celt">The number of items to be skipped.</param>
            <returns>If the method skips the number of items requested, the return value is S_OK. Otherwise, it is S_FALSE.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ienumstring-skip">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumString.Reset">
            <summary>Resets the enumeration sequence to the beginning.</summary>
            <returns>The return value is S_OK.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ienumstring-reset">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IEnumString.Clone(Windows.Win32.System.Com.IEnumString@)">
            <summary>Creates a new enumerator that contains the same enumeration state as the current one.</summary>
            <param name="ppenum">A pointer to the cloned enumerator object.</param>
            <returns>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, E_UNEXPECTED, and S_OK.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ienumstring-clone">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.BindToObject(Windows.Win32.System.Com.IBindCtx,Windows.Win32.System.Com.IMoniker,System.Guid*,System.Void**)">
            <summary>Binds to the specified object. The binding process involves finding the object, putting it into the running state if necessary, and providing the caller with a pointer to a specified interface on the identified object.</summary>
            <param name="pbc">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a> interface on the bind context object, which is used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment.</param>
            <param name="pmkToLeft">If the moniker is part of a composite moniker, pointer to the moniker to the left of this moniker. This parameter is primarily used by moniker implementers to enable cooperation between the various components of a composite moniker. Moniker clients should use <b>NULL</b>.</param>
            <param name="riidResult">The IID of the interface the client wishes to use to communicate with the object that the moniker identifies.</param>
            <param name="ppvResult">The address of pointer variable that receives the interface pointer requested in <i>riid</i>. Upon successful return, *<i>ppvResult</i> contains the requested interface pointer to the object the moniker identifies. When successful, the implementation must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the moniker. It is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If an error occurs, *<i>ppvResult</i> should be <b>NULL</b>.</param>
            <returns>
            <para>This method can return the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imoniker-bindtoobject">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.BindToStorage(Windows.Win32.System.Com.IBindCtx,Windows.Win32.System.Com.IMoniker,System.Guid*,System.Void**)">
            <summary>Binds to the storage for the specified object. Unlike the IMoniker::BindToObject method, this method does not activate the object identified by the moniker.</summary>
            <param name="pbc">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a> interface on the bind context object, which is used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment.</param>
            <param name="pmkToLeft">If the moniker is part of a composite moniker, pointer to the moniker to the left of this moniker. This parameter is primarily used by moniker implementers to enable cooperation between the various components of a composite moniker. Moniker clients should use <b>NULL</b>.</param>
            <param name="riid">A reference to the identifier of the storage interface requested, whose pointer will be returned in <i>ppvObj</i>. Storage interfaces commonly requested include <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istorage">IStorage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a>, and <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ilockbytes">ILockBytes</a>.</param>
            <param name="ppvObj">The address of pointer variable that receives the interface pointer requested in <i>riid</i>. Upon successful return, *<i>ppvObj</i> contains the requested interface pointer to the storage of the object the moniker identifies. When successful, the implementation must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the storage. It is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If an error occurs, *<i>ppvObj</i> should be <b>NULL</b>.</param>
            <returns>
            <para>This method can return the standard return values E_UNEXPECTED, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imoniker-bindtostorage">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.Reduce(Windows.Win32.System.Com.IBindCtx,System.UInt32,Windows.Win32.System.Com.IMoniker@,Windows.Win32.System.Com.IMoniker@)">
            <summary>Reduces a moniker to its simplest form.</summary>
            <param name="pbc">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a> interface on the bind context to be used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment.</param>
            <param name="dwReduceHowFar">Specifies how far this moniker should be reduced. This parameter must be one of the values from the <a href="https://docs.microsoft.com/windows/win32/api/objidl/ne-objidl-mkrreduce">MKRREDUCE</a> enumeration.</param>
            <param name="ppmkToLeft">
            <para>On entry, a pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> pointer variable that contains the interface pointer to moniker to the left of this moniker. This parameter is used primarily by moniker implementers to enable cooperation between the various components of a composite moniker; moniker clients can usually pass <b>NULL</b>. On return, *<i>ppmkToLeft</i> is usually set to <b>NULL</b>, indicating no change in the original moniker to the left. In rare situations, *<i>ppmkToLeft</i> indicates a moniker, indicating that the previous moniker to the left should be disregarded and the moniker returned through *<i>ppmkToLeft</i> is the replacement. In such a situation, the implementation must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a> on the old moniker to the left of this moniker and must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the new returned moniker; the caller must release it later. If an error occurs, the implementation can either leave the interface pointer unchanged or set it to <b>NULL</b>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imoniker-reduce#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppmkReduced">A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> pointer variable that receives the interface pointer to the reduced form of this moniker, which can be <b>NULL</b> if an error occurs or if this moniker is reduced to nothing. If this moniker cannot be reduced, *<i>ppmkReduced</i> is simply set to this moniker and the return value is MK_S_REDUCED_TO_SELF. If *<i>ppmkReduced</i> is non-<b>NULL</b>, the implementation must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the new moniker; it is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. (This is true even if *<i>ppmkReduced</i> is set to this moniker.)</param>
            <returns>
            <para>This method can return the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imoniker-reduce">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.ComposeWith(Windows.Win32.System.Com.IMoniker,Windows.Win32.Foundation.BOOL,Windows.Win32.System.Com.IMoniker@)">
            <summary>Creates a new composite moniker by combining the current moniker with the specified moniker.</summary>
            <param name="pmkRight">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface on the moniker to compose onto the end of this moniker.</param>
            <param name="fOnlyIfNotGeneric">If <b>TRUE</b>, the caller requires a nongeneric composition, so the operation should proceed only if <i>pmkRight</i> is a moniker class that this moniker can compose with in some way other than forming a generic composite. If <b>FALSE</b>, the method can create a generic composite if necessary. Most callers should set this parameter to <b>FALSE</b>.</param>
            <param name="ppmkComposite">A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> pointer variable that receives the composite moniker pointer. When successful, the implementation must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the resulting moniker; it is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If an error occurs or if the monikers compose to nothing (for example, composing an anti-moniker with an item moniker or a file moniker), *<i>ppmkComposite</i> should be set to <b>NULL</b>.</param>
            <returns>
            <para>This method can return the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imoniker-composewith">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.Enum(Windows.Win32.Foundation.BOOL,Windows.Win32.System.Com.IEnumMoniker@)">
            <summary>Retrieves a pointer to an enumerator for the components of a composite moniker.</summary>
            <param name="fForward">If <b>TRUE</b>, enumerates the monikers from left to right. If <b>FALSE</b>, enumerates from right to left.</param>
            <param name="ppenumMoniker">A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienummoniker">IEnumMoniker</a> pointer variable that receives the interface pointer to the enumerator object for the moniker. When successful, the implementation must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the enumerator object. It is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If an error occurs or if the moniker has no enumerable components, the implementation sets *<i>ppenumMoniker</i> to <b>NULL</b>.</param>
            <returns>This method can return the standard return values E_OUTOFMEMORY, E_UNEXPECTED, and S_OK.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imoniker-enum">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.IsEqual(Windows.Win32.System.Com.IMoniker)">
            <summary>Determines whether this moniker is identical to the specified moniker.</summary>
            <param name="pmkOtherMoniker">A  pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface on the moniker to be used for comparison with this one (the one from which this method is called).</param>
            <returns>This method returns S_OK to indicate that the two monikers are identical, and S_FALSE otherwise.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imoniker-isequal">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.Hash(System.UInt32*)">
            <summary>Creates a hash value using the internal state of the moniker.</summary>
            <param name="pdwHash">A pointer to a variable that receives the hash value.</param>
            <returns>This method returns S_OK to indicate that the hash value was retrieved successfully.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imoniker-hash">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.IsRunning(Windows.Win32.System.Com.IBindCtx,Windows.Win32.System.Com.IMoniker,Windows.Win32.System.Com.IMoniker)">
            <summary>Determines whether the object identified by this moniker is currently loaded and running.</summary>
            <param name="pbc">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a> interface on the bind context to be used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment.</param>
            <param name="pmkToLeft">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface on the moniker to the left of this moniker if this moniker is part of a composite. This parameter is used primarily by moniker implementers to enable cooperation between the various components of a composite moniker; moniker clients can usually pass <b>NULL</b>.</param>
            <param name="pmkNewlyRunning">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface on the moniker most recently added to the running object table (ROT). This can be <b>NULL</b>. If non-<b>NULL</b>, the implementation can return the results of calling <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imoniker-isequal">IMoniker::IsEqual</a> on the <i>pmkNewlyRunning</i> parameter, passing the current moniker. This parameter is intended to enable <b>IsRunning</b> implementations that are more efficient than just searching the ROT, but the implementation can choose to ignore <i>pmkNewlyRunning</i> without causing any harm.</param>
            <returns>
            <para>This method can return the standard return values E_UNEXPECTED, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imoniker-isrunning">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.GetTimeOfLastChange(Windows.Win32.System.Com.IBindCtx,Windows.Win32.System.Com.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME*)">
            <summary>Retrieves the time at which the object identified by this moniker was last changed.</summary>
            <param name="pbc">A pointer to the bind context to be used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment. For more information, see <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a>.</param>
            <param name="pmkToLeft">If the moniker is part of a composite moniker, pointer to the moniker to the left of this moniker. This parameter is primarily used by moniker implementers to enable cooperation between the various components of a composite moniker. Moniker clients should pass <b>NULL</b>.</param>
            <param name="pFileTime">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-filetime">FILETIME</a> structure that receives the time of last change. A value of {0xFFFFFFFF,0x7FFFFFFF} indicates an error (for example, exceeded time limit, information not available).</param>
            <returns>
            <para>This method can return the standard return values E_OUTOFMEMORY, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imoniker-gettimeoflastchange">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.Inverse(Windows.Win32.System.Com.IMoniker@)">
            <summary>Creates a moniker that is the inverse of this moniker. When composed to the right of this moniker or one of similar structure, the moniker will compose to nothing.</summary>
            <param name="ppmk">The address of an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> pointer variable that receives the interface pointer to a moniker that is the inverse of this moniker. When successful, the implementation must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the new inverse moniker. It is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If an error occurs, the implementation should set *<i>ppmk</i> to <b>NULL</b>.</param>
            <returns>
            <para>This method can return the standard return values E_OUTOFMEMORY, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imoniker-inverse">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.CommonPrefixWith(Windows.Win32.System.Com.IMoniker,Windows.Win32.System.Com.IMoniker@)">
            <summary>Creates a new moniker based on the prefix that this moniker has in common with the specified moniker.</summary>
            <param name="pmkOther">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface on another moniker to be compared with this one to determine whether there is a common prefix.</param>
            <param name="ppmkPrefix">The address of an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a>* pointer variable that receives the interface pointer to the moniker that is the common prefix of this moniker and pmkOther. When successful, the implementation must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the resulting moniker; it is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If an error occurs or if there is no common prefix, the implementation should set *<i>ppmkPrefix</i> to <b>NULL</b>.</param>
            <returns>
            <para>This method can return the standard return values E_OUTOFMEMORY, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imoniker-commonprefixwith">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.RelativePathTo(Windows.Win32.System.Com.IMoniker,Windows.Win32.System.Com.IMoniker@)">
            <summary>Creates a relative moniker between this moniker and the specified moniker.</summary>
            <param name="pmkOther">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface on the moniker to which a relative path should be taken.</param>
            <param name="ppmkRelPath">A pointer to an  <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> pointer variable that receives the interface pointer to the relative moniker. When successful, the implementation must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the new moniker; it is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If an error occurs, the implementation sets *<i>ppmkRelPath</i> to <b>NULL</b>.</param>
            <returns>
            <para>This method can return the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imoniker-relativepathto">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.GetDisplayName(Windows.Win32.System.Com.IBindCtx,Windows.Win32.System.Com.IMoniker,Windows.Win32.Foundation.PWSTR*)">
            <summary>Retrieves the display name for the moniker.</summary>
            <param name="pbc">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a> interface on the bind context to be used in this operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment.</param>
            <param name="pmkToLeft">If the moniker is part of a composite moniker, pointer to the moniker to the left of this moniker. This parameter is used primarily by moniker implementers to enable cooperation between the various components of a composite moniker. Moniker clients should pass <b>NULL</b>.</param>
            <param name="ppszDisplayName">The address of a pointer variable that receives a pointer to the display name string for the moniker. The implementation must use <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imalloc-alloc">IMalloc::Alloc</a> to allocate the string returned in <i>ppszDisplayName</i>, and the caller is responsible for calling <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-imalloc-free">IMalloc::Free</a> to free it. Both the caller and the implementation of this method use the COM task allocator returned by <a href="https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-cogetmalloc">CoGetMalloc</a>. If an error occurs, the implementation must set *<i>ppszDisplayName</i> should be set to <b>NULL</b>.</param>
            <returns>
            <para>This method can return the standard return values E_OUTOFMEMORY, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imoniker-getdisplayname">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.ParseDisplayName(Windows.Win32.System.Com.IBindCtx,Windows.Win32.System.Com.IMoniker,Windows.Win32.Foundation.PWSTR,System.UInt32*,Windows.Win32.System.Com.IMoniker@)">
            <summary>Converts a display name into a moniker.</summary>
            <param name="pbc">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a> interface on the bind context to be used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment.</param>
            <param name="pmkToLeft">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface on the moniker that has been built out of the display name up to this point.</param>
            <param name="pszDisplayName">The remaining display name to be parsed.</param>
            <param name="pchEaten">A pointer to a variable that receives the number of characters in <i>pszDisplayName</i> that were consumed in this step.</param>
            <param name="ppmkOut">A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> pointer variable that receives the interface pointer to the moniker that was built from <i>pszDisplayName</i>. When successful, the implementation must call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the new moniker; it is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If an error occurs, the implementation sets *<i>ppmkOut</i> to <b>NULL</b>.</param>
            <returns>
            <para>This method can return the standard return valuesE_OUTOFMEMORY and E_UNEXPECTED, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imoniker-parsedisplayname">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IMoniker.IsSystemMoniker(System.UInt32*)">
            <summary>Determines whether this moniker is one of the system-provided moniker classes.</summary>
            <param name="pdwMksys">A pointer to a variables that receives one of the values from the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ne-objidl-mksys">MKSYS</a> enumeration and refers to one of the COM moniker classes. This parameter cannot be <b>NULL</b>.</param>
            <returns>This method returns S_OK to indicate that the moniker is a system moniker, and S_FALSE otherwise.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-imoniker-issystemmoniker">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IPersist.GetClassID(System.Guid*)">
            <summary>Retrieves the class identifier (CLSID) of the object.</summary>
            <param name="pClassID">A pointer to the location that receives the CLSID on return. The CLSID is a globally unique identifier (GUID) that uniquely represents an object class that defines the code that can manipulate the object's data.</param>
            <returns>If the method succeeds, the return value is S_OK. Otherwise, it is E_FAIL.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ipersist-getclassid">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IPersistStream.IsDirty">
            <summary>Determines whether an object has changed since it was last saved to its stream.</summary>
            <returns>This method returns S_OK to indicate that the object has changed. Otherwise, it returns S_FALSE.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ipersiststream-isdirty">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IPersistStream.Load(Windows.Win32.System.Com.IStream)">
            <summary>Initializes an object from the stream where it was saved previously.</summary>
            <param name="pStm">An <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a> pointer to the stream from which the object should be loaded.</param>
            <returns>
            <para>This method can return the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ipersiststream-load">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IPersistStream.Save(Windows.Win32.System.Com.IStream,Windows.Win32.Foundation.BOOL)">
            <summary>Saves an object to the specified stream.</summary>
            <param name="pStm">An <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a> pointer to the stream into which the object should be saved.</param>
            <param name="fClearDirty">Indicates whether to clear the dirty flag after the save is complete. If <b>TRUE</b>, the flag should be cleared. If <b>FALSE</b>, the flag should be left unchanged.</param>
            <returns>
            <para>This method can return the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ipersiststream-save">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IPersistStream.GetSizeMax(System.UInt64*)">
            <summary>Retrieves the size of the stream needed to save the object.</summary>
            <param name="pcbSize">The size in bytes of the stream needed to save this object, in bytes.</param>
            <returns>This method returns S_OK to indicate that the size was retrieved successfully.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-ipersiststream-getsizemax">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IRunningObjectTable.Register(System.UInt32,System.Object,Windows.Win32.System.Com.IMoniker,System.UInt32*)">
            <summary>Registers an object and its identifying moniker in the running object table (ROT).</summary>
            <param name="grfFlags">
            <para>Specifies whether the ROT's reference to punkObject is weak or strong and controls access to the object through its entry in the ROT. For details, see the Remarks section. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-irunningobjecttable-register#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="punkObject">A pointer to the object that is being registered as running.</param>
            <param name="pmkObjectName">A pointer to the moniker that identifies <i>punkObject</i>.</param>
            <param name="pdwRegister">An identifier for this ROT entry that can be used in subsequent calls to <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-irunningobjecttable-revoke">IRunningObjectTable::Revoke</a> or <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-irunningobjecttable-notechangetime">IRunningObjectTable::NoteChangeTime</a>. The caller cannot specify <b>NULL</b> for this parameter. If an error occurs, *<i>pdwRegister</i> is set to zero.</param>
            <returns>
            <para>This method can return the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-irunningobjecttable-register">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IRunningObjectTable.Revoke(System.UInt32)">
            <summary>Removes an entry from the running object table (ROT) that was previously registered by a call to IRunningObjectTable::Register.</summary>
            <param name="dwRegister">The identifier of the ROT entry to be revoked.</param>
            <returns>This method can return the standard return values E_INVALIDARG and S_OK.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-irunningobjecttable-revoke">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IRunningObjectTable.IsRunning(Windows.Win32.System.Com.IMoniker)">
            <summary>Determines whether the object identified by the specified moniker is currently running.</summary>
            <param name="pmkObjectName">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface on the moniker.</param>
            <returns>If the object is in the running state, the return value is <b>TRUE</b>. Otherwise, it is <b>FALSE</b>.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-irunningobjecttable-isrunning">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IRunningObjectTable.GetObject(Windows.Win32.System.Com.IMoniker,System.Object@)">
            <summary>Determines whether the object identified by the specified moniker is running, and if it is, retrieves a pointer to that object.</summary>
            <param name="pmkObjectName">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface on the moniker.</param>
            <param name="ppunkObject">A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a> pointer variable that receives the interface pointer to the running object. When successful, the implementation calls <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the object; it is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If the object is not running or if an error occurs, the implementation sets *<i>ppunkObject</i> to <b>NULL</b>.</param>
            <returns>
            <para>This method can return the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-irunningobjecttable-getobject">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IRunningObjectTable.NoteChangeTime(System.UInt32,System.Runtime.InteropServices.ComTypes.FILETIME*)">
            <summary>Records the time that a running object was last modified. The object must have previously been registered with the running object table (ROT). This method stores the time of last change in the ROT.</summary>
            <param name="dwRegister">The identifier of the ROT entry of the changed object. This value was previously returned by <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-irunningobjecttable-register">IRunningObjectTable::Register</a>.</param>
            <param name="pfiletime">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-filetime">FILETIME</a> structure containing the object's last change time.</param>
            <returns>This method can return the standard return values E_INVALIDARG and S_OK.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-irunningobjecttable-notechangetime">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IRunningObjectTable.GetTimeOfLastChange(Windows.Win32.System.Com.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME*)">
            <summary>Retrieves the time that an object was last modified.</summary>
            <param name="pmkObjectName">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-imoniker">IMoniker</a> interface on the moniker.</param>
            <param name="pfiletime">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-filetime">FILETIME</a> structure that receives the object's last change time.</param>
            <returns>
            <para>This method can return the following values. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-irunningobjecttable-gettimeoflastchange">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IRunningObjectTable.EnumRunning(Windows.Win32.System.Com.IEnumMoniker@)">
            <summary>Creates and returns a pointer to an enumerator that can list the monikers of all the objects currently registered in the running object table (ROT).</summary>
            <param name="ppenumMoniker">A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienummoniker">IEnumMoniker</a> pointer variable that receives the interface pointer to the new enumerator for the ROT. When successful, the implementation calls <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-addref">AddRef</a> on the enumerator; it is the caller's responsibility to call <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nf-unknwn-iunknown-release">Release</a>. If an error occurs; the implementation sets *<i>ppenumMoniker</i> to <b>NULL</b>.</param>
            <returns>This method can return the standard return values E_OUTOFMEMORY and S_OK.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-irunningobjecttable-enumrunning">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ISequentialStream.Read(System.Void*,System.UInt32,System.UInt32*)">
            <summary>Reads a specified number of bytes from the stream object into memory, starting at the current seek pointer.</summary>
            <param name="pv">A pointer to the buffer which the stream data is read into.</param>
            <param name="cb">The number of bytes of data to read from the stream object.</param>
            <param name="pcbRead">
            <para>A pointer to a <b>ULONG</b> variable that receives the actual number of bytes read from the stream object. <div class="alert"><b>Note</b>  The number of bytes read may be zero.</div> <div> </div></para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-isequentialstream-read#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | All of the requested data was successfully read from the stream object; the number of bytes requested in *cb* is the same as the number of bytes returned in *pcbRead*.| |S_FALSE | The value returned in *pcbRead* is less than the number of bytes requested in *cb*. This indicates the end of the stream has been reached. The number of bytes read indicates how much of the *pv* buffer has been filled.| |E_PENDING | Asynchronous storage only: Part or all of the data to be read is currently unavailable. | |STG_E_ACCESSDENIED | The caller does not have permissions required to read this stream object.| |STG_E_INVALIDPOINTER | One of the pointer values is invalid.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-isequentialstream-read">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.ISequentialStream.Write(System.Void*,System.UInt32,System.UInt32*)">
            <summary>Writes a specified number of bytes into the stream object starting at the current seek pointer.</summary>
            <param name="pv">A pointer to the buffer that contains the data that is to be written to the stream. A valid pointer must be provided for this parameter even when <i>cb</i> is zero.</param>
            <param name="cb">The number of bytes of data to attempt to write into the stream. This value can be zero.</param>
            <param name="pcbWritten">A pointer to a <b>ULONG</b> variable where this method writes the actual number of bytes written to the stream object. The caller can set this pointer to <b>NULL</b>, in which case this method does not provide the actual number of bytes written.</param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The data was successfully written to the stream object.| |E_PENDING | Asynchronous Storage only: Part or all of the data to be written is currently unavailable.| |STG_E_MEDIUMFULL | The write operation failed because there is no space left on the storage device.| |STG_E_ACCESSDENIED | The caller does not have the required  permissions for writing to this stream object.| |STG_E_CANTSAVE | Data cannot be written for reasons other than improper access or insufficient space.| |STG_E_INVALIDPOINTER | One of the pointer values is not valid. The *pv* parameter must contain a valid pointer even if *cb* is zero.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.| |STG_E_WRITEFAULT | The write operation failed due to a disk error. This value is also returned when this method attempts to write to a stream that was opened in simple mode (using the STGM_SIMPLE flag).|</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-isequentialstream-write">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.Seek(System.Int64,Windows.Win32.System.Com.STREAM_SEEK,System.UInt64*)">
            <summary>Changes the seek pointer to a new location. The new location is relative to either the beginning of the stream, the end of the stream, or the current seek pointer.</summary>
            <param name="dlibMove">The displacement to be added to the location indicated by the <i>dwOrigin</i> parameter. If <i>dwOrigin</i> is <b>STREAM_SEEK_SET</b>, this is interpreted as an unsigned value rather than a signed value.</param>
            <param name="dwOrigin">The origin for the displacement specified in <i>dlibMove</i>. The origin can be the beginning of the file (<b>STREAM_SEEK_SET</b>), the current seek pointer (<b>STREAM_SEEK_CUR</b>), or the end of the file (<b>STREAM_SEEK_END</b>). For more information about values, see the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ne-objidl-stream_seek">STREAM_SEEK</a> enumeration.</param>
            <param name="plibNewPosition">
            <para>A pointer to the location where this method writes the value of the new seek pointer from the beginning of the stream. You can set this pointer to <b>NULL</b>. In this case, this method does not provide the new seek pointer.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-istream-seek#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The seek pointer was successfully adjusted.| |E_PENDING | Asynchronous Storage only: Part or all of the stream data is currently unavailable. | |STG_E_INVALIDPOINTER | Indicates that *plibNewPosition* points to invalid memory, because *plibNewPosition* is not read.| |STG_E_INVALIDFUNCTION | The *dwOrigin* parameter contains an invalid value, or the *dlibMove* parameter contains a bad offset value. For example, the result of the seek pointer is a negative offset value.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-istream-seek">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.SetSize(System.UInt64)">
            <summary>Changes the size of the stream object.</summary>
            <param name="libNewSize">Specifies the new size, in bytes, of the stream.</param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The size of the stream object was successfully changed.| |E_PENDING | Asynchronous Storage only: Part or all of the stream's data is currently unavailable.| |STG_E_MEDIUMFULL | The stream size is not changed because there is no space left on the storage device.| |STG_E_INVALIDFUNCTION | The value of the *libNewSize* parameter is not supported by the implementation. Not all streams support greater than 232 bytes. If a stream does not support more than 232 bytes, the high DWORD data type of *libNewSize* must be zero. If it is nonzero, the implementation may return STG_E_INVALIDFUNCTION. In general, COM-based implementations of the IStream interface do not support streams larger than 232 bytes.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-istream-setsize">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.CopyTo(Windows.Win32.System.Com.IStream,System.UInt64,System.UInt64*,System.UInt64*)">
            <summary>Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.</summary>
            <param name="pstm">A pointer to the destination stream. The stream pointed to by <i>pstm</i> can be a new stream or a clone of the source stream.</param>
            <param name="cb">The number of bytes to copy from the source stream.</param>
            <param name="pcbRead">A pointer to the location where this method writes the actual number of bytes read from the source. You can set this pointer to <b>NULL</b>. In this case, this method does not provide the actual number of bytes read.</param>
            <param name="pcbWritten">A pointer to the location where this method writes the actual number of bytes written to the destination. You can set this pointer to <b>NULL</b>. In this case, this method does not provide the actual number of bytes written.</param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The stream object was successfully copied.| |E_PENDING | Asynchronous Storage only: Part or all of the data to be copied is currently unavailable. | |STG_E_INVALIDPOINTER | The value of one of the pointer parameters is invalid.| |STG_E_MEDIUMFULL | The stream is not copied because there is no space left on the storage device.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-istream-copyto">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.Commit(Windows.Win32.System.Com.StructuredStorage.STGC)">
            <summary>The Commit method ensures that any changes made to a stream object open in transacted mode are reflected in the parent storage.</summary>
            <param name="grfCommitFlags">
            <para>Controls how the changes for the stream object are committed. See the <a href="https://docs.microsoft.com/windows/desktop/api/wtypes/ne-wtypes-stgc">STGC</a> enumeration for a definition of these values.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-istream-commit#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | Changes to the stream object were successfully committed to the parent level.| |E_PENDING | Asynchronous Storage only: Part or all of the stream's data is currently unavailable. | |STG_E_MEDIUMFULL | The commit operation failed due to lack of space on the storage device.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-istream-commit">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.Revert">
            <summary>The Revert method discards all changes that have been made to a transacted stream since the last IStream::Commit call. On streams open in direct mode and streams using the COM compound file implementation of IStream::Revert, this method has no effect.</summary>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The stream was successfully reverted to its previous version.| |E_PENDING | Asynchronous Storage only: Part or all of the stream's data is currently unavailable. |</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-istream-revert">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.LockRegion(System.UInt64,System.UInt64,System.UInt32)">
            <summary>The LockRegion method restricts access to a specified range of bytes in the stream.</summary>
            <param name="libOffset">Integer that specifies the byte offset for the beginning of the range.</param>
            <param name="cb">Integer that specifies the length of the range, in bytes, to be restricted.</param>
            <param name="dwLockType">Specifies the restrictions being requested on accessing the range.</param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The specified range of bytes was locked.| |E_PENDING | Asynchronous Storage only: Part or all of the stream's data is currently unavailable. | |STG_E_INVALIDFUNCTION | Locking is not supported at all or the specific type of lock requested is not supported.| |STG_E_LOCKVIOLATION | Requested lock is supported, but cannot be granted because of an existing lock.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-istream-lockregion">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.UnlockRegion(System.UInt64,System.UInt64,System.UInt32)">
            <summary>The UnlockRegion method removes the access restriction on a range of bytes previously restricted with IStream::LockRegion.</summary>
            <param name="libOffset">Specifies the byte offset for the beginning of the range.</param>
            <param name="cb">Specifies, in bytes, the length of the range to be restricted.</param>
            <param name="dwLockType">Specifies the access restrictions previously placed on the range.</param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The byte range was unlocked.| |E_PENDING | Asynchronous Storage only: Part or all of the stream's data is currently unavailable.| |STG_E_INVALIDFUNCTION | Locking is not supported at all or the specific type of lock requested is not supported.| |STG_E_LOCKVIOLATION | The requested unlock operation cannot be granted.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-istream-unlockregion">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.Stat(Windows.Win32.System.Com.STATSTG*,System.UInt32)">
            <summary>The Stat method retrieves the STATSTG structure for this stream.</summary>
            <param name="pstatstg">
            <para>Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ns-objidl-statstg">STATSTG</a> structure where this method places information about this stream object.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-istream-stat#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="grfStatFlag">
            <para>Specifies that this method does not return some of the members in the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ns-objidl-statstg">STATSTG</a> structure, thus saving a memory allocation operation. Values are taken from the <a href="https://docs.microsoft.com/windows/desktop/api/wtypes/ne-wtypes-statflag">STATFLAG</a> enumeration.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-istream-stat#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The STATSTG structure was successfully returned at the specified location.| |E_PENDING | Asynchronous Storage only: Part or all of the stream's data is currently unavailable. | |STG_E_ACCESSDENIED | The caller does not have enough permissions for accessing statistics for this storage object.| |STG_E_INSUFFICIENTMEMORY | The STATSTG structure was not returned due to a lack of memory.| |STG_E_INVALIDFLAG | The value for the *grfStateFlag* parameter is not valid.| |STG_E_INVALIDPOINTER | The *pStatStg* pointer is not valid.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-istream-stat">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.System.Com.IStream.Clone(Windows.Win32.System.Com.IStream@)">
            <summary>The Clone method creates a new stream object with its own seek pointer that references the same bytes as the original stream.</summary>
            <param name="ppstm">
            <para>When successful, pointer to the location of an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-istream">IStream</a> pointer to the new stream object. If an error occurs, this parameter is <b>NULL</b>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-istream-clone#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>This method can return one of these values. | Return code | Description | |----------------|---------------| |S_OK | The stream was successfully cloned.| |E_PENDING | Asynchronous Storage only: Part or all of the stream's data is currently unavailable. | |STG_E_INSUFFICIENTMEMORY | The stream was not cloned due to a lack of memory.| |STG_E_INVALIDPOINTER | The ppStm pointer is not valid.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/nf-objidl-istream-clone">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.System.Com.STATSTG">
            <summary>Contains statistical data about an open storage, stream, or byte-array object.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/ns-objidl-statstg">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.pwcsName">
            <summary>
            <para>A pointer to a <b>NULL</b>-terminated Unicode string that contains the name. Space for this string is allocated by the method called and freed by the caller (for more information, see <a href="https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-cotaskmemfree">CoTaskMemFree</a>). To  not return this member, specify the STATFLAG_NONAME value when you call a method that returns a <b>STATSTG</b> structure, except for calls to <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ienumstatstg">IEnumSTATSTG::Next</a>, which provides no way to specify this value.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/ns-objidl-statstg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.type">
            <summary>
            <para>Indicates the type of storage object. This is one of the values from the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ne-objidl-stgty">STGTY</a> enumeration.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/ns-objidl-statstg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.cbSize">
            <summary>Specifies the size, in bytes, of the stream or byte array.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.mtime">
            <summary>Indicates the last modification time for this storage, stream, or byte array.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.ctime">
            <summary>Indicates the creation time for this storage, stream, or byte array.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.atime">
            <summary>Indicates the last access time for this storage, stream, or byte array.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.grfMode">
            <summary>
            <para>Indicates the access mode specified when the object was opened. This member is only valid in calls to <b>Stat</b> methods.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/ns-objidl-statstg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.grfLocksSupported">
            <summary>
            <para>Indicates the types of region locking supported by the stream or byte array. For more information about the values available, see the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/ne-objidl-locktype">LOCKTYPE</a> enumeration. This member is not used for storage objects.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/ns-objidl-statstg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.clsid">
            <summary>Indicates the class identifier for the storage object; set to CLSID_NULL for new storage objects. This member is not used for streams or byte arrays.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.grfStateBits">
            <summary>
            <para>Indicates the current state bits of the storage object; that is, the value most recently set by the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istorage-setstatebits">IStorage::SetStateBits</a> method. This member is not valid for streams or byte arrays.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/ns-objidl-statstg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STATSTG.reserved">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.StructuredStorage.STGC">
            <summary>Specify the conditions for performing the commit operation in the IStorage::Commit and IStream::Commit methods.</summary>
            <remarks>
            <para>You can specify <b>STGC_DEFAULT</b> or some combination of <b>STGC_OVERWRITE</b>, <b>STGC_ONLYIFCURRENT</b>, and <b>STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE</b> for normal commit operations. You can specify <b>STGC_CONSOLIDATE</b> with any other STGC flags. Typically, use <b>STGC_ONLYIFCURRENT</b> to protect the storage object in cases where more than one user can edit the object simultaneously.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//wtypes/ne-wtypes-stgc#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.StructuredStorage.STGC.STGC_DEFAULT">
            <summary>You can specify this condition with <b>STGC_CONSOLIDATE</b>, or some combination of the other three flags in this list of elements. Use this value to increase the readability of code.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.StructuredStorage.STGC.STGC_OVERWRITE">
            <summary>
            <para>The commit operation can overwrite existing data to reduce overall space requirements. This value is not recommended for typical usage because it is not as robust as the default value. In this case, it is possible for the commit operation to fail after the old data is overwritten, but before the new data is completely committed. Then, neither the old version nor the new version of the storage object will be intact.</para>
            <para>You can use this value in the following cases: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//wtypes/ne-wtypes-stgc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.StructuredStorage.STGC.STGC_ONLYIFCURRENT">
            <summary>Prevents multiple users of a storage object from overwriting each other's changes. The commit operation occurs only if there have been no changes to the saved storage object because the user most recently opened it. Thus, the saved version of the storage object is the same version that the user has been editing. If other users have changed the storage object, the commit operation fails and returns the STG_E_NOTCURRENT value. To override this behavior, call the <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istorage-commit">IStorage::Commit</a> or <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nf-objidl-istream-commit">IStream::Commit</a> method again using the <b>STGC_DEFAULT</b> value.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.StructuredStorage.STGC.STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE">
            <summary>
            <para>Commits the changes to a write-behind disk cache, but does not save the cache to the disk. In a write-behind disk cache, the operation that writes to disk actually writes to a disk cache, thus increasing performance. The cache is eventually written to the disk, but usually not until after the write operation has already returned. The performance increase comes at the expense of an increased risk of losing data if a problem occurs before the cache is saved and the data in the cache is lost.</para>
            <para>If you do not specify this value, then committing changes to root-level storage objects is robust even if a disk cache is used. The two-phase commit process ensures that data is stored on the disk and not just to the disk cache.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//wtypes/ne-wtypes-stgc#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Com.StructuredStorage.STGC.STGC_CONSOLIDATE">
            <summary>Windows 2000 and Windows XP: Indicates that a storage should be consolidated after it is committed, resulting in a smaller file on disk. This flag is valid only on the outermost storage object that has been opened in transacted mode. It is not valid for streams. The <b>STGC_CONSOLIDATE</b> flag can be combined with any other STGC flags.</summary>
        </member>
        <member name="T:Windows.Win32.System.Com.STREAM_SEEK">
            <summary>The STREAM_SEEK enumeration values specify the origin from which to calculate the new seek-pointer location.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//objidl/ne-objidl-stream_seek">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Com.STREAM_SEEK.STREAM_SEEK_SET">
            <summary>The new seek pointer is an offset relative to the beginning of the stream. In this case, the <i>dlibMove</i> parameter is the new seek position relative to the beginning of the stream.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STREAM_SEEK.STREAM_SEEK_CUR">
            <summary>The new seek pointer is an offset relative to the current seek pointer location. In this case, the <i>dlibMove</i> parameter is the signed displacement from the current seek position.</summary>
        </member>
        <member name="F:Windows.Win32.System.Com.STREAM_SEEK.STREAM_SEEK_END">
            <summary>The new seek pointer is an offset relative to the end of the stream. In this case, the <i>dlibMove</i> parameter is the new seek position relative to the end of the stream.</summary>
        </member>
        <member name="M:Windows.Win32.Foundation.HRESULT.ThrowOnFailure(System.IntPtr)">
            <inheritdoc cref="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)" />
            <param name="errorInfo">
            A pointer to the IErrorInfo interface that provides more information about the
            error. You can specify <see cref="F:System.IntPtr.Zero"/> to use the current IErrorInfo interface, or
            <c>new IntPtr(-1)</c> to ignore the current IErrorInfo interface and construct the exception
            just from the error code.
            </param>
            <returns><see langword="this"/> <see cref="T:Windows.Win32.Foundation.HRESULT"/>, if it does not reflect an error.</returns>
            <seealso cref="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)"/>
        </member>
        <member name="T:Windows.Win32.Foundation.PCWSTR">
            <summary>
            A pointer to a constant character string.
            </summary>
        </member>
        <member name="F:Windows.Win32.Foundation.PCWSTR.Value">
            <summary>
            A pointer to the first character in the string. The content should be considered readonly, as it was typed as constant in the SDK.
            </summary>
        </member>
        <member name="P:Windows.Win32.Foundation.PCWSTR.Length">
            <summary>
            Gets the number of characters up to the first null character (exclusive).
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.PCWSTR.ToString">
            <summary>
            Returns a <see langword="string"/> with a copy of this character array.
            </summary>
            <returns>A <see langword="string"/>, or <see langword="null"/> if <see cref="F:Windows.Win32.Foundation.PCWSTR.Value"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Windows.Win32.FriendlyOverloadExtensions.Next(Windows.Win32.System.Com.IEnumMoniker,Windows.Win32.System.Com.IMoniker[],System.UInt32*)">
            <inheritdoc cref="M:Windows.Win32.System.Com.IEnumMoniker.Next(System.UInt32,Windows.Win32.System.Com.IMoniker[],System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItem.BindToHandler(Windows.Win32.System.Com.IBindCtx,System.Guid*,System.Guid*,System.Object@)">
            <summary>Binds to a handler for an item as specified by the handler ID value (BHID).</summary>
            <param name="pbc">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a>*</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/objidl/nn-objidl-ibindctx">IBindCtx</a> interface on a bind context object. Used to pass optional parameters to the handler. The contents of the bind context are handler-specific. For example, when binding to <b>BHID_Stream</b>, the <a href="https://docs.microsoft.com/windows/desktop/Stg/stgm-constants">STGM</a> flags in the bind context indicate the mode of access desired (read or read/write).</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shobjidl_core/nf-shobjidl_core-ishellitem-bindtohandler#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="bhid">Type: <b>REFGUID</b></param>
            <param name="riid">
            <para>Type: <b>REFIID</b> IID of the object type to retrieve.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shobjidl_core/nf-shobjidl_core-ishellitem-bindtohandler#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppv">
            <para>Type: <b>void**</b> When this method returns, contains a pointer of type <i>riid</i> that is returned by the handler specified by <i>rbhid</i>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shobjidl_core/nf-shobjidl_core-ishellitem-bindtohandler#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b xmlns:loc="http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns:loc="http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shobjidl_core/nf-shobjidl_core-ishellitem-bindtohandler">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItem.GetParent(Windows.Win32.UI.Shell.IShellItem@)">
            <summary>Gets the parent of an IShellItem object.</summary>
            <param name="ppsi">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a>**</b> The address of a pointer to the parent of an <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a> interface.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shobjidl_core/nf-shobjidl_core-ishellitem-getparent#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> Returns S_OK if successful, or an error value otherwise.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shobjidl_core/nf-shobjidl_core-ishellitem-getparent">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItem.GetDisplayName(Windows.Win32.UI.Shell.SIGDN,Windows.Win32.Foundation.PWSTR*)">
            <summary>Gets the display name of the IShellItem object.</summary>
            <param name="sigdnName">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/ne-shobjidl_core-sigdn">SIGDN</a></b> One of the <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/ne-shobjidl_core-sigdn">SIGDN</a> values that indicates how the name should look.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shobjidl_core/nf-shobjidl_core-ishellitem-getdisplayname#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppszName">
            <para>Type: <b>LPWSTR*</b> A value that, when this function returns successfully, receives the address of a pointer to the retrieved display name.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shobjidl_core/nf-shobjidl_core-ishellitem-getdisplayname#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> If this method succeeds, it returns <b xmlns:loc="http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns:loc="http://microsoft.com/wdcml/l10n">HRESULT</b> error code.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shobjidl_core/nf-shobjidl_core-ishellitem-getdisplayname">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItem.GetAttributes(System.UInt32,System.UInt32*)">
            <summary>Gets a requested set of attributes of the IShellItem object.</summary>
            <param name="sfgaoMask">
            <para>Type: <b>SFGAOF</b> Specifies the attributes to retrieve. One or more of the <a href="https://docs.microsoft.com/windows/desktop/shell/sfgao">SFGAO</a> values. Use a bitwise OR operator to determine the attributes to retrieve.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shobjidl_core/nf-shobjidl_core-ishellitem-getattributes#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="psfgaoAttribs">
            <para>Type: <b>SFGAOF*</b> A pointer to a value that, when this method returns successfully, contains the requested attributes. One or more of the <a href="https://docs.microsoft.com/windows/desktop/shell/sfgao">SFGAO</a> values. Only those attributes specified by <i>sfgaoMask</i> are returned; other attribute values are undefined.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shobjidl_core/nf-shobjidl_core-ishellitem-getattributes#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> Returns S_OK if the attributes returned exactly match those requested in <i>sfgaoMask</i>, S_FALSE if the attributes do not exactly match, or a standard COM error value otherwise.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shobjidl_core/nf-shobjidl_core-ishellitem-getattributes">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.UI.Shell.IShellItem.Compare(Windows.Win32.UI.Shell.IShellItem,System.UInt32,System.Int32*)">
            <summary>Compares two IShellItem objects.</summary>
            <param name="psi">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a>*</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a> object to compare with the existing <b>IShellItem</b> object.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shobjidl_core/nf-shobjidl_core-ishellitem-compare#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="hint">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/shobjidl_core/ne-shobjidl_core-_sichintf">SICHINTF</a></b> One of the <a href="https://docs.microsoft.com/windows/win32/api/shobjidl_core/ne-shobjidl_core-_sichintf">SICHINTF</a> values that determines how to perform the comparison. See <b>SICHINTF</b> for the list of possible values for this parameter.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shobjidl_core/nf-shobjidl_core-ishellitem-compare#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="piOrder">
            <para>Type: <b>int*</b> This parameter receives the result of the comparison. If the two items are the same this parameter equals zero; if they are different the parameter is nonzero.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shobjidl_core/nf-shobjidl_core-ishellitem-compare#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> Returns S_OK if the items are the same, S_FALSE if they are different, or an error value otherwise.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shobjidl_core/nf-shobjidl_core-ishellitem-compare">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG">
            <summary>Specify special retrieval options for known folders. These values supersede CSIDL values, which have parallel meanings.</summary>
            <remarks>
            <para>These values, with the exception of KF_FLAG_ALIAS_ONLY, were defined in Windows Vista as individual constants. They are defined as an enumeration only in Windows 7 and later. However, all underlying numerical values are the same in either form.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shlobj_core/ne-shlobj_core-known_folder_flag#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG.KF_FLAG_DEFAULT">
            <summary>0x00000000. No flags.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG.KF_FLAG_FORCE_APP_DATA_REDIRECTION">
            <summary>
            <para>0x00080000. Introduced in Windows 10, version 1709. When called from a packaged app, <b>LocalAppData/RoamingAppData</b> folders are redirected to private app locations that match the paths returned from <a href="https://docs.microsoft.com/uwp/api/Windows.Storage.ApplicationData">Windows.Storage.ApplicationData.Current{LocalFolder|RoamingFolder}</a>. Other folders are redirected to subdirectories of <b>LocalAppData</b> This flag is used with <b>FOLDERID_AppDataDesktop</b>, <b>FOLDERID_AppDataDocuments</b>, <b>FOLDERID_AppDataFavorites</b>, and <b>FOLDERID_AppDataProgramData</b>. It is also intended for compatibility with .NET applications, and not meant to be used directly from an application.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shlobj_core/ne-shlobj_core-known_folder_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG.KF_FLAG_RETURN_FILTER_REDIRECTION_TARGET">
            <summary>0x00040000. <b>Introduced in Windows 10, version 1703</b>. When running in a Desktop Bridge process, some file system locations are redirected to package-specific locations by the file system. This flag will cause the target of the direction to be returned for those locations. This is useful in cases where the real location within the file system needs to be known.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG.KF_FLAG_FORCE_PACKAGE_REDIRECTION">
            <summary>0x00020000. <b>Introduced in Windows 10, version 1703</b>. When running inside an AppContainer process, or when providing an AppContainer token, some folders are redirected to AppContainer-specific locations within the package. This flag will force with redirection for folders that are not normally redirected for the purposes of Desktop Bridge processes, and can be used for sharing files between UWA and Desktop Bridge apps within the same package. This flag is functionally identical to <b>KF_FLAG_FORCE_APPCONTAINER_REDIRECTION</b>.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG.KF_FLAG_NO_PACKAGE_REDIRECTION">
            <summary>0x00010000. <b>Introduced in Windows 10, version 1703</b>. When running inside a packaged process (such as a Desktop Bridge app or an AppContainer), or when providing a packaged process token, some folders are redirected to package-specific locations. This flag disables redirection on locations where it is applied, and instead returns the path that would be returned were it not running inside a packaged process. This flag is functionally identical to <b>KF_FLAG_NO_APPCONTAINER_REDIRECTION</b>.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG.KF_FLAG_FORCE_APPCONTAINER_REDIRECTION">
            <summary>0x00020000. Introduced in Windows 8. This flag is functionally identical to <b>KF_FLAG_FORCE_PACKAGE_REDIRECTION</b>, and was deprecated in Windows 10, version 1703.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG.KF_FLAG_NO_APPCONTAINER_REDIRECTION">
            <summary>0x00010000. <b>Introduced in Windows 8</b>. This flag is functionally identical to <b>KF_FLAG_NO_PACKAGE_REDIRECTION</b> and was deprecated in Windows 10, version 1703.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG.KF_FLAG_CREATE">
            <summary>
            <para>0x00008000. Forces the creation of the specified folder if that folder does not already exist. The security provisions predefined for that folder are applied. If the folder does not exist and cannot be created, the function returns a failure code and no path is returned. This value can be used only with the following functions and methods:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shlobj_core/ne-shlobj_core-known_folder_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG.KF_FLAG_DONT_VERIFY">
            <summary>
            <para>0x00004000. Do not verify the folder's existence before attempting to retrieve the path or IDList. If this flag is not set, an attempt is made to verify that the folder is truly present at the path. If that verification fails due to the folder being absent or inaccessible, the function returns a failure code and no path is returned.</para>
            <para>If the folder is located on a network, the function might take a longer time to execute. Setting this flag can reduce that lag time.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shlobj_core/ne-shlobj_core-known_folder_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG.KF_FLAG_DONT_UNEXPAND">
            <summary>0x00002000. Stores the full path in the registry without using environment strings. If this flag is not set, portions of the path may be represented by environment strings such as %USERPROFILE%. This flag can only be used with <a href="https://docs.microsoft.com/windows/desktop/api/shlobj_core/nf-shlobj_core-shsetknownfolderpath">SHSetKnownFolderPath</a> and <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-iknownfolder-setpath">IKnownFolder::SetPath</a>.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG.KF_FLAG_NO_ALIAS">
            <summary>0x00001000. Gets the true system path for the folder, free of any aliased placeholders such as %USERPROFILE%, returned by <a href="https://docs.microsoft.com/windows/desktop/api/shlobj_core/nf-shlobj_core-shgetknownfolderidlist">SHGetKnownFolderIDList</a> and <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-iknownfolder-getidlist">IKnownFolder::GetIDList</a>. This flag has no effect on paths returned by <a href="https://docs.microsoft.com/windows/desktop/api/shlobj_core/nf-shlobj_core-shgetknownfolderpath">SHGetKnownFolderPath</a> and <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-iknownfolder-getpath">IKnownFolder::GetPath</a>. By default, known folder retrieval functions and methods return the aliased path if an alias exists.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG.KF_FLAG_INIT">
            <summary>
            <para>0x00000800. Initializes the folder using its Desktop.ini settings. If the folder cannot be initialized, the function returns a failure code and no path is returned. This flag should always be combined with KF_FLAG_CREATE.</para>
            <para>If the folder is located on a network, the function might take a longer time to execute.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shlobj_core/ne-shlobj_core-known_folder_flag#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG.KF_FLAG_DEFAULT_PATH">
            <summary>0x00000400. Gets the default path for a known folder. If this flag is not set, the function retrieves the current—and possibly redirected—path of the folder. The execution of this flag includes a verification of the folder's existence unless KF_FLAG_DONT_VERIFY is set.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG.KF_FLAG_NOT_PARENT_RELATIVE">
            <summary>0x00000200. Gets the folder's default path independent of the current location of its parent. KF_FLAG_DEFAULT_PATH must also be set.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG.KF_FLAG_SIMPLE_IDLIST">
            <summary>0x00000100. Build a simple IDList (PIDL) This value can be used when you want to retrieve the file system path but do not specify this value if you are retrieving the localized display name of the folder because it might not resolve correctly.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG.KF_FLAG_ALIAS_ONLY">
            <summary>0x80000000. <b>Introduced in Windows 7</b>. Return only aliased PIDLs. Do not use the file system path.</summary>
        </member>
        <member name="T:Windows.Win32.UI.Shell.SIGDN">
            <summary>Requests the form of an item's display name to retrieve through IShellItem::GetDisplayName and SHGetNameFromIDList.</summary>
            <remarks>
            <para>Different forms of an item's name can be retrieved through the item's properties, including those listed here. Note that not all properties are present on all items, so only those appropriate to the item will appear.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shobjidl_core/ne-shobjidl_core-sigdn#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Shell.SIGDN.SIGDN_NORMALDISPLAY">
            <summary>0x00000000. Returns the display name relative to the parent folder. In UI this name is generally ideal for display to the user.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.SIGDN.SIGDN_PARENTRELATIVEPARSING">
            <summary>(int)0x80018001. Returns the parsing name relative to the parent folder. This name is not suitable for use in UI.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.SIGDN.SIGDN_DESKTOPABSOLUTEPARSING">
            <summary>(int)0x80028000. Returns the parsing name relative to the desktop. This name is not suitable for use in UI.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.SIGDN.SIGDN_PARENTRELATIVEEDITING">
            <summary>(int)0x80031001. Returns the editing name relative to the parent folder. In UI this name is suitable for display to the user.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.SIGDN.SIGDN_DESKTOPABSOLUTEEDITING">
            <summary>(int)0x8004c000. Returns the editing name relative to the desktop. In UI this name is suitable for display to the user.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.SIGDN.SIGDN_FILESYSPATH">
            <summary>(int)0x80058000. Returns the item's file system path, if it has one. Only items that report <a href="https://docs.microsoft.com/windows/desktop/shell/sfgao">SFGAO_FILESYSTEM</a> have a file system path. When an item does not have a file system path, a call to <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ishellitem-getdisplayname">IShellItem::GetDisplayName</a> on that item will fail. In UI this name is suitable for display to the user in some cases, but note that it might not be specified for all items.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.SIGDN.SIGDN_URL">
            <summary>(int)0x80068000. Returns the item's URL, if it has one. Some items do not have a URL, and in those cases a call to <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ishellitem-getdisplayname">IShellItem::GetDisplayName</a> will fail. This name is suitable for display to the user in some cases, but note that it might not be specified for all items.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.SIGDN.SIGDN_PARENTRELATIVEFORADDRESSBAR">
            <summary>(int)0x8007c001. Returns the path relative to the parent folder in a friendly format as displayed in an address bar. This name is suitable for display to the user.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.SIGDN.SIGDN_PARENTRELATIVE">
            <summary>(int)0x80080001. Returns the path relative to the parent folder.</summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.SIGDN.SIGDN_PARENTRELATIVEFORUI">
            <summary>(int)0x80094001. <b>Introduced in Windows 8</b>.</summary>
        </member>
        <member name="T:Windows.Win32.PInvoke">
            <content>
            Contains extern methods from "Kernel32.dll".
            </content>
            <content>
            Contains extern methods from "Shell32.dll".
            </content>
        </member>
        <member name="M:Windows.Win32.PInvoke.CloseHandle(Windows.Win32.Foundation.HANDLE)">
            <summary>Closes an open object handle.</summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If the application is running under a debugger,  the function will throw an exception if it receives either a  handle value that is not valid  or a pseudo-handle value. This can happen if you close a handle twice, or if you  call <b>CloseHandle</b> on a handle returned by the <a href="/windows/desktop/api/fileapi/nf-fileapi-findfirstfilea">FindFirstFile</a> function instead of calling the <a href="/windows/desktop/api/fileapi/nf-fileapi-findclose">FindClose</a> function.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//handleapi/nf-handleapi-closehandle">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SHGetKnownFolderItem(System.Guid*,Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG,System.Runtime.InteropServices.SafeHandle,System.Guid*,System.Void**)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.SHGetKnownFolderItem(System.Guid*,Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG,Windows.Win32.Foundation.HANDLE,System.Guid*,System.Void**)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.SHGetKnownFolderItem(System.Guid*,Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG,Windows.Win32.Foundation.HANDLE,System.Guid*,System.Void**)">
            <summary>Retrieves an IShellItem object that represents a known folder.</summary>
            <param name="rfid">
            <para>Type: <b>REFKNOWNFOLDERID</b> A reference to the <a href="https://docs.microsoft.com/windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a>, a <b>GUID</b> that identifies the folder that contains the item.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shlobj_core/nf-shlobj_core-shgetknownfolderitem#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="flags">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/shlobj_core/ne-shlobj_core-known_folder_flag">KNOWN_FOLDER_FLAG</a></b> Flags that specify special options used in the retrieval of the known folder <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishellitem">IShellItem</a>. This value can be <b>KF_FLAG_DEFAULT</b>; otherwise, one or more of the <a href="https://docs.microsoft.com/windows/desktop/api/shlobj_core/ne-shlobj_core-known_folder_flag">KNOWN_FOLDER_FLAG</a> values.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shlobj_core/nf-shlobj_core-shgetknownfolderitem#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="hToken">
            <para>Type: <b>HANDLE</b> An <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/access-tokens">access token</a> used to represent a particular user. This parameter is usually set to <b>NULL</b>, in which case the function tries to access the current user's instance of the folder. However, you may need to assign a value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <b>Documents</b>.</para>
            <para>The calling application is responsible for correct impersonation when <i>hToken</i> is non-<b>null</b>. It must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/access-control">Access Control</a> for further discussion of access control issues. Assigning the <i>hToken</i> parameter a value of -1 indicates the Default User. This allows clients of <a href="https://docs.microsoft.com/windows/desktop/api/shlobj_core/nf-shlobj_core-shsetknownfolderpath">SHSetKnownFolderPath</a> to set folder locations (such as the <b>Desktop</b> folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as <b>Documents</b> and <b>Desktop</b>. Any items added to the Default User folder also appear in any new user account. Note that access to the Default User folders requires administrator privileges.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shlobj_core/nf-shlobj_core-shgetknownfolderitem#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="riid">
            <para>Type: <b>REFIID</b> A reference to the IID of the interface that represents the item, usually IID_IShellItem or IID_IShellItem2.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shlobj_core/nf-shlobj_core-shgetknownfolderitem#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppv">
            <para>Type: <b>void**</b> When this method returns, contains the interface pointer requested in <i>riid</i>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shlobj_core/nf-shlobj_core-shgetknownfolderitem#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> Returns S_OK if successful, or an error value otherwise, including the following: </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shlobj_core/nf-shlobj_core-shgetknownfolderitem">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SHGetKnownFolderPath(System.Guid*,System.UInt32,System.Runtime.InteropServices.SafeHandle,Windows.Win32.Foundation.PWSTR*)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.SHGetKnownFolderPath(System.Guid*,System.UInt32,Windows.Win32.Foundation.HANDLE,Windows.Win32.Foundation.PWSTR*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.SHGetKnownFolderPath(System.Guid*,System.UInt32,Windows.Win32.Foundation.HANDLE,Windows.Win32.Foundation.PWSTR*)">
            <summary>Retrieves the full path of a known folder identified by the folder's KNOWNFOLDERID.</summary>
            <param name="rfid">
            <para>Type: <b>REFKNOWNFOLDERID</b> A reference to the <a href="https://docs.microsoft.com/windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> that identifies the folder.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shlobj_core/nf-shlobj_core-shgetknownfolderpath#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="dwFlags">
            <para>Type: <b>DWORD</b> Flags that specify special retrieval options. This value can be 0; otherwise, one or more of the <a href="https://docs.microsoft.com/windows/desktop/api/shlobj_core/ne-shlobj_core-known_folder_flag">KNOWN_FOLDER_FLAG</a> values.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shlobj_core/nf-shlobj_core-shgetknownfolderpath#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="hToken">
            <para>Type: <b>HANDLE</b> An <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/access-tokens">access token</a> that represents a particular user. If this parameter is <b>NULL</b>, which is the most common usage, the function requests the known folder for the current user.</para>
            <para>Request a specific user's folder by passing the <i>hToken</i> of that user. This is typically done in the context of a service that has sufficient privileges to retrieve the token of a given user. That token must be opened with <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/access-rights-for-access-token-objects">TOKEN_QUERY</a> and <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/access-rights-for-access-token-objects">TOKEN_IMPERSONATE</a> rights. In some cases, you also need to include <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/access-rights-for-access-token-objects">TOKEN_DUPLICATE</a>. In addition to passing the user's <i>hToken</i>, the registry hive of that specific user must be mounted. See <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/access-control">Access Control</a> for further discussion of access control issues. Assigning the <i>hToken</i> parameter a value of -1 indicates the Default User. This allows clients of <b>SHGetKnownFolderPath</b> to find folder locations (such as the <b>Desktop</b> folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as <b>Documents</b> and <b>Desktop</b>. Any items added to the Default User folder also appear in any new user account. Note that access to the Default User folders requires administrator privileges.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shlobj_core/nf-shlobj_core-shgetknownfolderpath#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ppszPath">
            <para>Type: <b>PWSTR*</b> When this method returns, contains the address of a pointer to a null-terminated Unicode string that specifies the path of the known folder. The calling process is responsible for freeing this resource once it is no longer needed by calling <a href="https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-cotaskmemfree">CoTaskMemFree</a>, whether <b>SHGetKnownFolderPath</b> succeeds or not. The returned path does not include a trailing backslash. For example, "C:\Users" is returned rather than "C:\Users\\".</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shlobj_core/nf-shlobj_core-shgetknownfolderpath#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> Returns S_OK if successful, or an error value otherwise, including the following: </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shlobj_core/nf-shlobj_core-shgetknownfolderpath">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SHSetKnownFolderPath(System.Guid*,System.UInt32,System.Runtime.InteropServices.SafeHandle,System.String)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.SHSetKnownFolderPath(System.Guid*,System.UInt32,Windows.Win32.Foundation.HANDLE,Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.SHSetKnownFolderPath(System.Guid*,System.UInt32,Windows.Win32.Foundation.HANDLE,Windows.Win32.Foundation.PCWSTR)">
            <summary>Redirects a known folder to a new location.</summary>
            <param name="rfid">
            <para>Type: <b>REFKNOWNFOLDERID</b> A <b>GUID</b> that identifies the known folder.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shlobj_core/nf-shlobj_core-shsetknownfolderpath#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="dwFlags">
            <para>Type: <b>DWORD</b> Either 0 or the following value.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shlobj_core/nf-shlobj_core-shsetknownfolderpath#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="hToken">
            <para>Type: <b>HANDLE</b> An <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/access-tokens">access token</a> used to represent a particular user. This parameter is usually set to <b>NULL</b>, in which case the function tries to access the current user's instance of the folder. However, you may need to assign a value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <b>Documents</b>.</para>
            <para>The calling application is responsible for correct impersonation when <i>hToken</i> is non-null. It must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/access-control">Access Control</a> for further discussion of access control issues. Assigning the <i>hToken</i> parameter a value of -1 indicates the Default User. This allows clients of <b>SHSetKnownFolderPath</b> to set folder locations (such as the <b>Desktop</b> folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as <b>Documents</b> and <b>Desktop</b>. Any items added to the Default User folder also appear in any new user account. Note that access to the Default User folders requires administrator privileges.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shlobj_core/nf-shlobj_core-shsetknownfolderpath#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pszPath">
            <para>Type: <b>PCWSTR</b> A pointer to the folder's new path. This is a null-terminated Unicode string of length MAX_PATH. This path cannot be of zero length.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shlobj_core/nf-shlobj_core-shsetknownfolderpath#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HRESULT</b> Returns S_OK if successful, or an error value otherwise, including the following: </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shlobj_core/nf-shlobj_core-shsetknownfolderpath">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
    </members>
</doc>
